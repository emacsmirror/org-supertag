;;; org-supertag-parser.el --- Parser for org-supertag -*- lexical-binding: t; -*-

;;; Commentary:
;; 定义了三种基本数据结构：
;; 1. Field: (key . value)
;; 2. Tag: (name field)
;; 3. Combination: (:type type :tags tags)

;;; Code:

(require 'org)
(require 'org-element)

;;; Data Structure Constructors

(defun org-supertag-make-field (key value)
  "创建标准字段结构 (KEY . VALUE)。"
  (cons key value))

(defun org-supertag-make-tag (name &optional fields)
  "创建标签结构。"
  (cons name fields))

(defun org-supertag-make-combination (type tags)
  "创建组合结构。"
  (if (eq type 'single)
      (car tags)  ;; 单个标签直接返回
    (list :type type :tags tags)))  ;; 组合返回 plist

;;; Basic Parsers

(defun org-supertag-parse-field (str)
  "解析字段字符串 STR，返回 (key . value) 结构。"
  (when (and str (string-match "\\([^:]+\\):\\([^,]*\\)" str))
    (org-supertag-make-field
     (string-trim (match-string 1 str))
     (string-trim (match-string 2 str)))))

(defun org-supertag-parse-single-tag (str)
  "解析单个标签。"
  (when (string-match "#\\([^{[:space:]]+\\)\\({\\([^}]+\\)}\\)?" str)
    (let* ((tag (match-string 1 str))
           (fields-str (match-string 3 str))
           (fields (when fields-str
                    (org-supertag-parse-field fields-str))))
      (org-supertag-make-combination 'single tag))))


;;; Token Types and Lexer

(defun org-supertag-make-token (type value)
  "创建一个词法标记。"
  (cons type value))

(defun org-supertag-token-type (token)
  "获取标记类型。"
  (car token))

(defun org-supertag-token-value (token)
  "获取标记值。"
  (cdr token))

(defun org-supertag-tokenize (str)
  "将字符串转换为词法标记序列。"
  (when (and str (not (string-empty-p str)))
    (let ((tokens nil)
          (pos 0)
          (len (length str)))
      (while (< pos len)
        (let ((char (aref str pos)))
          (cond
           ;; 跳过空白字符
           ((memq char '(?\s ?\t ?\n))
            (setq pos (1+ pos)))
           
           ;; 标签
           ((eq char ?#)
            (let ((tag-end (or (string-match "[{[:space:]()]" str pos)
                              len)))
              (push (org-supertag-make-token 'tag 
                    (substring str pos tag-end))
                   tokens)
              (setq pos tag-end)))
           
           ;; 字段
           ((eq char ?{)
            (let ((field-end (string-match "}" str pos)))
              (when field-end
                (push (org-supertag-make-token 'field
                      (substring str (1+ pos) field-end))
                     tokens)
                (setq pos (1+ field-end)))))
           
           ;; 括号和操作符
           ((eq char ?\()
            (push (org-supertag-make-token 'lparen "(") tokens)
            (setq pos (1+ pos)))
           ((eq char ?\))
            (push (org-supertag-make-token 'rparen ")") tokens)
            (setq pos (1+ pos)))
           ((eq char ?|)
            (push (org-supertag-make-token 'pipe "|") tokens)
            (setq pos (1+ pos)))
           ((eq char ?!)
            (push (org-supertag-make-token 'not "!") tokens)
            (setq pos (1+ pos)))
           
           ;; 忽略其他字符
           (t (setq pos (1+ pos))))))
      (nreverse tokens))))

;;; Parser State

(defun org-supertag-make-parser-state (tokens)
  "创建解析器状态。"
  (list :tokens tokens :pos 0))

(defun org-supertag-current-token (state)
  "获取当前标记。"
  (when-let ((tokens (plist-get state :tokens))
             (pos (plist-get state :pos)))
    (when (< pos (length tokens))
      (nth pos tokens))))

(defun org-supertag-advance (state)
  "前进到下一个标记。"
  (plist-put state :pos
             (1+ (plist-get state :pos))))

(defun org-supertag-match (state type)
  "匹配并消费指定类型的标记。"
  (let ((token (org-supertag-current-token state)))
    (when (and token (eq (org-supertag-token-type token) type))
      (prog1 token
        (org-supertag-advance state)))))

;;; Expression Parser

(defun org-supertag-parse-expression (str)
  "解析标签表达式。"
  (when (and str (not (string-empty-p str)))
    (if (string-match-p " " str)
        ;; 包含空格，说明是组合表达式
        (let* ((tokens (org-supertag-tokenize str))
               (state (org-supertag-make-parser-state tokens)))
          (org-supertag-parse-and state))
      ;; 单个标签
      (org-supertag-parse-tag-string str))))


(defun org-supertag-parse-and (state)
  "解析 AND 表达式。"
  (let ((left (org-supertag-parse-primary state)))
    (if (org-supertag-current-token state)
        (org-supertag-make-combination 'and
          (list left (org-supertag-parse-and state)))
      left)))

(defun org-supertag-parse-or (state)
  "解析 OR 表达式。"
  (org-supertag-advance state)
  (let ((left (org-supertag-parse-primary state)))
    (when (and (org-supertag-current-token state)
               (eq (org-supertag-token-type 
                    (org-supertag-current-token state)) 'pipe))
      (org-supertag-advance state)
      (let ((right (org-supertag-parse-primary state)))
        (when (and (org-supertag-current-token state)
                  (eq (org-supertag-token-type 
                       (org-supertag-current-token state)) 'rparen))
          (org-supertag-advance state)
          (org-supertag-make-combination 'or
            (list left right)))))))
            
(defun org-supertag-parse-primary (state)
  "解析基本表达式。"
  (let ((token (org-supertag-current-token state)))
    (cond
     ;; 标签
     ((and token (eq (org-supertag-token-type token) 'tag))
      (org-supertag-advance state)
      (org-supertag-make-combination 'single
        (substring (org-supertag-token-value token) 1)))
     
     ;; 括号表达式
     ((and token (eq (org-supertag-token-type token) 'lparen))
      (org-supertag-parse-or state))
     
     ;; 否定
     ((and token (eq (org-supertag-token-type token) 'not))
      (org-supertag-advance state)
      (org-supertag-make-combination 'not
        (list (org-supertag-parse-primary state))))
     
     ;; 错误情况
     (t (error "Unexpected token: %S" token)))))

;;; Main Interface

(defun org-supertag-parse-tag-string (str)
  "解析单个标签字符串，返回 (name . fields) 结构。"
  (when (string-match "#\\([^{[:space:]]+\\)\\({\\([^}]+\\)}\\)?" str)
    (let* ((name (concat "#" (match-string 1 str)))
           (fields-str (match-string 3 str))
           (fields (when fields-str
                    (org-supertag-parse-field fields-str))))
      (org-supertag-make-tag name fields))))

(defun org-supertag-parse-expression (str)
  "解析标签表达式。"
  (when (and str (not (string-empty-p str)))
    (if (string-match-p " " str)
        ;; 复合表达式
        (let* ((tokens (org-supertag-tokenize str))
               (state (org-supertag-make-parser-state tokens)))
          (org-supertag-parse-and state))
      ;; 单个标签
      (org-supertag-parse-tag-string str))))

(defun org-supertag-parse-and (tokens)
  "解析 AND 表达式。"
  (let ((left (org-supertag-parse-primary tokens)))
    (if (looking-at-space tokens)
        (org-supertag-make-combination 'and
          (list left (org-supertag-parse-and tokens)))
      left)))

(defun org-supertag-parse-or (tokens)
  "解析 OR 表达式。"
  (when (looking-at-lparen tokens)
    (let ((left (org-supertag-parse-primary tokens)))
      (when (looking-at-pipe tokens)
        (org-supertag-make-combination 'or
          (list left (org-supertag-parse-primary tokens)))))))

(defun org-supertag-parse-primary (tokens)
  "解析基本表达式（单个标签或括号表达式）。"
  (cond
   ((looking-at-tag tokens)
    (org-supertag-parse-tag tokens))
   ((looking-at-lparen tokens)
    (org-supertag-parse-or tokens))
   ((looking-at-not tokens)
    (org-supertag-make-combination 'not
      (list (org-supertag-parse-primary tokens))))))


(defun org-supertag-parse-tag-at-point ()
  "解析光标位置的标签。"
  (save-excursion
    (when (looking-at "#\\([^{[:space:]]+\\)\\({\\([^}]+\\)}\\)?\\([[:space:]]*\\((\\([^)]+\\))\\)?\\)?")
      (let* ((tag (match-string-no-properties 1))
             (fields-str (match-string-no-properties 3))
             (rest-str (match-string-no-properties 4))
             (fields (when fields-str
                      (org-supertag-parse-field fields-str))))
        (if (and rest-str (string-match-p "^[[:space:]]*(.+)" rest-str))
            ;; 表达式
            (org-supertag-parse-expression 
             (concat "#" tag 
                    (when fields-str (format "{%s}" fields-str))
                    rest-str))
          ;; 单个标签
          (cons (concat "#" tag) fields))))))

;;; Helper Functions

(defun org-supertag-looking-at-tag (state)
  "检查当前是否是标签标记。"
  (let ((token (org-supertag-current-token state)))
    (and token (eq (org-supertag-token-type token) 'tag))))

(defun org-supertag-looking-at-lparen (state)
  "检查当前是否是左括号标记。"
  (let ((token (org-supertag-current-token state)))
    (and token (eq (org-supertag-token-type token) 'lparen))))

(defun org-supertag-looking-at-rparen (state)
  "检查当前是否是右括号标记。"
  (let ((token (org-supertag-current-token state)))
    (and token (eq (org-supertag-token-type token) 'rparen))))

(defun org-supertag-looking-at-pipe (state)
  "检查当前是否是管道标记。"
  (let ((token (org-supertag-current-token state)))
    (and token (eq (org-supertag-token-type token) 'pipe))))

(defun org-supertag-looking-at-not (state)
  "检查当前是否是否定标记。"
  (let ((token (org-supertag-current-token state)))
    (and token (eq (org-supertag-token-type token) 'not))))

(provide 'org-supertag-parser)
;;; org-supertag-parser.el ends here 
