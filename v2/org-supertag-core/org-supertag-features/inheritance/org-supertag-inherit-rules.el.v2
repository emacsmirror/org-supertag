;;; org-supertag-inherit-rules.el --- Inheritance rules -*- lexical-binding: t; -*-

(require 'eieio)
(require 'cl-lib)

(defclass org-supertag-rule ()
  ((parent-tag :initarg :parent-tag
               :type string
               :documentation "父标签")
   (child-tag :initarg :child-tag
              :type string
              :documentation "子标签")
   (fields :initarg :fields
           :type list
           :initform nil
           :documentation "要继承的字段列表")
   (overrides :initarg :overrides
              :type list
              :initform nil
              :documentation "字段值覆盖"))
  "定义标签之间的继承规则")

(defvar org-supertag-inheritance-rules nil
  "继承规则列表")

(defvar org-supertag-inheritance-cache (make-hash-table :test 'equal)
  "缓存继承规则的结果")

(defun org-supertag-add-rule (parent-tag child-tag &optional fields overrides)
  "添加继承规则"
  (let ((rule (make-instance 'org-supertag-rule
                            :parent-tag parent-tag
                            :child-tag child-tag
                            :fields fields
                            :overrides overrides)))
    (push rule org-supertag-inheritance-rules)))

(defun org-supertag-get-rules-for-tag (tag)
  "获取标签的所有继承规则"
  (cl-remove-if-not
   (lambda (rule)
     (string= (oref rule child-tag) tag))
   org-supertag-inheritance-rules))

(defun org-supertag-clear-inheritance-cache ()
  "清除继承规则缓存"
  (clrhash org-supertag-inheritance-cache))

(defun org-supertag-cache-get (key)
  "从缓存中获取值"
  (gethash key org-supertag-inheritance-cache))

(defun org-supertag-cache-set (key value)
  "设置缓存值"
  (puthash key value org-supertag-inheritance-cache))

;; 使用 slot-value 而不是定义新的泛型方法
(defun org-supertag-rule-get-parent-tag (rule)
  "获取规则的父标签"
  (slot-value rule 'parent-tag))

(defun org-supertag-rule-get-child-tag (rule)
  "获取规则的子标签"
  (slot-value rule 'child-tag))

(defun org-supertag-rule-get-fields (rule)
  "获取规则的字段列表"
  (slot-value rule 'fields))

(defun org-supertag-rule-get-overrides (rule)
  "获取规则的覆盖值"
  (slot-value rule 'overrides))

(defun org-supertag-validate-chain (tag &optional visited)
  "验证继承链是否有循环"
  (let ((visited (or visited (make-hash-table :test 'equal))))
    (if (gethash tag visited)
        nil  ; 发现循环
      (progn
        (puthash tag t visited)
        (let ((rules (org-supertag-get-rules-for-tag tag)))
          (catch 'cycle
            (dolist (rule rules t)
              (let ((parent-tag (org-supertag-rule-get-parent-tag rule)))
                (unless (org-supertag-validate-chain parent-tag visited)
                  (throw 'cycle nil))))))))))

(provide 'org-supertag-inherit-rules)
