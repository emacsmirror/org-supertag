;;; org-supertag-inherit-resolver.el --- Inheritance resolver -*- lexical-binding: t; -*-

(require 'eieio)
(require 'cl-lib)
(require 'org-supertag-models)
(require 'org-supertag-db)

(defvar org-supertag-inheritance-rules nil
  "继承规则列表")

(defun org-supertag-resolve-inheritance (tag &optional db)
  "解析标签 TAG 的继承规则。"
  (message "Resolving inheritance for tag: %s" tag)
  (let* ((rules (org-supertag-get-rules-for-tag tag))
         (result nil))
    (message "Found rules for tag %s: %S" tag rules)
    
    ;; 处理每个规则
    (dolist (rule rules)
      (let* ((parent-tag (oref rule parent-tag))
             (parent-nodes (when db 
                            (org-supertag-db-get-nodes-by-tag db parent-tag)))
             (allowed-fields (oref rule fields))
             (overrides (oref rule overrides)))
        (message "Processing parent tag: %s, nodes: %S, allowed fields: %S" 
                parent-tag parent-nodes allowed-fields)
        
        ;; 首先应用覆盖
        (when overrides
          (message "Applying overrides: %S" overrides)
          (dolist (override overrides)
            (let* ((field-name (car override))
                   (field-value (cdr override)))
              (message "Adding override: %s = %s" field-name field-value)
              (push (cons field-name field-value) result))))
        
        ;; 从每个父节点收集字段
        (dolist (parent parent-nodes)
          (let ((parent-fields (oref parent fields)))
            (message "Processing parent fields: %S" parent-fields)
            
            ;; 合并允许的字段
            (dolist (field parent-fields)
              (let ((field-name (oref field name))
                    (field-value (oref field value)))
                (message "Checking field: %s = %s" field-name field-value)
                ;; 只继承允许的字段，且不覆盖已有的值
                (when (and (or (null allowed-fields)
                             (member field-name allowed-fields))
                         (not (assoc field-name result)))
                  (message "Inheriting field: %s = %s" field-name field-value)
                  (push (cons field-name field-value) result))))))))
    
    (let ((final-result (nreverse result)))
      (message "Final inherited fields: %S" final-result)
      final-result)))

(defun org-supertag-get-rules-for-tag (tag)
  "获取标签的所有继承规则。"
  (let ((rules (cl-remove-if-not
                (lambda (rule)
                  (string= (oref rule child-tag) tag))
                org-supertag-inheritance-rules)))
    (message "Found %d rules for tag %s: %S" (length rules) tag rules)
    rules))

;; 添加辅助函数用于调试
(defun org-supertag-debug-node (node)
  "打印节点的调试信息"
  (message "Node ID: %s" (oref node id))
  (message "Node Content: %s" (oref node content))
  (message "Node Tags: %S" (oref node tags))
  (message "Node Fields: %S" 
          (mapcar (lambda (f) 
                   (cons (oref f name) (oref f value))) 
                 (oref node fields))))

;; 修改字段访问函数
(defun org-supertag-get-field-value (node field-name)
  "获取节点字段值，添加调试信息"
  (let ((field (cl-find field-name (oref node fields)
                       :key (lambda (f) (oref f name))
                       :test #'equal)))
    (when field
      (message "Found field %s with value %s in node %s" 
              field-name (oref field value) (oref node id))
      (oref field value))))

(provide 'org-supertag-inherit-resolver) 
