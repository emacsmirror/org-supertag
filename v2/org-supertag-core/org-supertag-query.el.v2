;;; org-supertag-query.el --- Query engine for org-supertag -*- lexical-binding: t; -*-

(require 'org-supertag-models)
(require 'org-supertag-db)
(require 'cl-lib)

;;; Query Language

(defclass org-supertag-query ()
  ((type :initarg :type
         :type symbol
         :documentation "Query type: 'tag, 'field, or 'content")
   (operator :initarg :operator
            :type symbol
            :documentation "Query operator: 'and, 'or, 'not")
   (value :initarg :value
          :documentation "Query value")
   (children :initarg :children
            :initform nil
            :type list
            :documentation "Child queries for compound queries"))
  "A query object for org-supertag.")

(defun org-supertag-make-query (type operator value &optional children)
  "Create a new query with TYPE, OPERATOR, VALUE and optional CHILDREN."
  (make-instance 'org-supertag-query
                 :type type
                 :operator operator
                 :value value
                 :children children))

;;; Query Builder

(cl-defmethod org-supertag-query-and (queries)
  "Combine QUERIES with AND operator."
  (org-supertag-make-query 'compound 'and nil queries))

(cl-defmethod org-supertag-query-or (queries)
  "Combine QUERIES with OR operator."
  (org-supertag-make-query 'compound 'or nil queries))

(cl-defmethod org-supertag-query-not ((query org-supertag-query))
  "Negate QUERY."
  (org-supertag-make-query 'compound 'not nil (list query)))

(cl-defmethod org-supertag-query-tag (tag)
  "Create a query for TAG."
  (org-supertag-make-query 'tag 'equals tag))

(cl-defmethod org-supertag-query-field (name value &optional operator)
  "Create a query for field with NAME and VALUE using OPERATOR."
  (org-supertag-make-query 'field (or operator 'equals)
                          (cons name value)))

(cl-defmethod org-supertag-query-content (pattern &optional regexp)
  "Create a query for content matching PATTERN.
If REGEXP is non-nil, treat PATTERN as regular expression."
  (org-supertag-make-query 'content (if regexp 'regexp 'contains)
                          pattern))

;;; Query Execution

(cl-defmethod org-supertag-query-execute ((query org-supertag-query) db)
  "Execute QUERY against DB."
  (let ((type (oref query type))
        (operator (oref query operator))
        (value (oref query value))
        (children (oref query children)))
    (pcase type
      ('compound
       (org-supertag-query--execute-compound operator children db))
      ('tag
       (org-supertag-query--execute-tag value db))
      ('field
       (org-supertag-query--execute-field (car value) (cdr value) operator db))
      ('content
       (org-supertag-query--execute-content value operator db)))))

(defun org-supertag-query--execute-compound (operator queries db)
  "Execute compound query with OPERATOR and QUERIES against DB."
  (let ((results (mapcar (lambda (q) (org-supertag-query-execute q db))
                        queries)))
    (pcase operator
      ('and (apply #'cl-intersection results))
      ('or (apply #'cl-union results))
      ('not (cl-set-difference
             (org-supertag-db-get-all-nodes db)
             (car results))))))

(defun org-supertag-query--execute-tag (tag db)
  "Execute tag query for TAG against DB."
  (org-supertag-db-get-nodes-by-tag db tag))

(defun org-supertag-query--execute-field (name value operator db)
  "Execute field query for NAME and VALUE with OPERATOR against DB."
  (let ((nodes (org-supertag-db-get-nodes-by-field db name value)))
    (pcase operator
      ('equals nodes)
      ('contains
       (cl-remove-if-not
        (lambda (node)
          (let ((field-value (org-supertag-node-get-field-value node name)))
            (and field-value
                 (string-match-p value field-value))))
        nodes))
      ('regexp
       (cl-remove-if-not
        (lambda (node)
          (let ((field-value (org-supertag-node-get-field-value node name)))
            (and field-value
                 (string-match-p value field-value))))
        nodes)))))

(defun org-supertag-query--execute-content (pattern operator db)
  "Execute content query for PATTERN with OPERATOR against DB."
  (cl-remove-if-not
   (lambda (node)
     (let ((content (oref node content)))
       (pcase operator
         ('contains (string-match-p (regexp-quote pattern) content))
         ('regexp (string-match-p pattern content)))))
   (org-supertag-db-get-all-nodes db)))

(provide 'org-supertag-query)
;;; org-supertag-query.el ends here 