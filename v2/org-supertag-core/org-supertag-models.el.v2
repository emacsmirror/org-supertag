;;; org-supertag-models.el --- Data models for org-supertag -*- lexical-binding: t; -*-

(require 'eieio)
(require 'cl-lib)

;; 延迟加载字段类型定义
(declare-function org-supertag-get-field-type "org-supertag-field-types")

(defclass org-supertag-position ()
  ((buffer :initarg :buffer
          :type buffer
          :documentation "Buffer containing the node")
   (point  :initarg :point
          :type integer
          :documentation "Point position in buffer")
   (line   :initarg :line
          :type integer
          :documentation "Line number")
   (column :initarg :column
          :type integer
          :documentation "Column number"))
  "Position information for a node.")

(defclass org-supertag-field ()
  ((name    :initarg :name
            :type string
            :documentation "Field name")
   (type    :initarg :type
            :type string  ; 只使用字符串类型
            :documentation "Field type name")
   (value   :initarg :value
            :documentation "Field value")
   (source :initarg :source
           :accessor org-supertag-field-source
           :documentation "字段来源（tag 或 property）")
   (inherit :initarg :inherit
            :type boolean
            :initform nil
            :documentation "Whether this field should be inherited"))
  "Field definition for a supertag.")

(defclass org-supertag-template ()
  ((name        :initarg :name
               :type string
               :documentation "Template name")
   (fields      :initarg :fields
               :type list
               :initform nil
               :documentation "List of org-supertag-field")
   (parent      :initarg :parent
               :type (or null org-supertag-template)
               :initform nil
               :documentation "Parent template for inheritance")
   (validators  :initarg :validators
               :type list 
               :initform nil
               :documentation "List of validation functions"))
  "Template definition for a supertag.")

(defclass org-supertag-node ()
  ((title :initarg :title
          :accessor org-supertag-node-title)
   (tags :initarg :tags
         :initform nil
         :accessor org-supertag-node-tags)
   (fields :initarg :fields
          :initform nil
          :accessor org-supertag-node-fields)))

;;; Constructors

(cl-defun org-supertag-make-position
    (&key buffer point line column)
  "Create a new position object."
  (make-instance 'org-supertag-position
                 :buffer buffer
                 :point point
                 :line line
                 :column column))

(defun org-supertag-normalize-field-name (name)
  "规范化字段名称。"
  (cond
   ((stringp name) name)
   ((symbolp name) (symbol-name name))
   ((consp name) (if (stringp (car name))
                     (car name)
                   (error "Invalid field name: %S" name)))
   (t (error "Field name must be a string, symbol, or cons: %S" name))))

(cl-defun org-supertag-make-field (&rest args)
  "创建字段实例。
支持的关键字参数：
:name - 字段名称（必须是字符串）
:type - 字段类型（字符串或类型对象）
:value - 字段值
:inherit - 是否继承（布尔值）"
  (let* ((name (plist-get args :name))
         (type (plist-get args :type))
         (value (plist-get args :value))
         (inherit (plist-get args :inherit))
         (type-name (cond
                    ((stringp type) type)
                    ((and (object-p type)
                          (slot-exists-p type 'name))
                     (oref type name))
                    (t "text"))))
    ;; 确保字段名称是字符串
    (unless (stringp name)
      (error "Field name must be a string: %S" name))
    
    ;; 创建字段实例
    (make-instance 'org-supertag-field
                  :name name
                  :type type-name
                  :value value
                  :inherit inherit)))

(cl-defun org-supertag-make-template
    (&key name fields parent validators)
  "Create a new template object."
  (make-instance 'org-supertag-template
                 :name name
                 :fields fields
                 :parent parent
                 :validators validators))

(cl-defun org-supertag-make-node
    (&key id content tags fields references position)
  "Create a new node object."
  (make-instance 'org-supertag-node
                 :id id
                 :content content
                 :tags tags
                 :fields fields
                 :references references
                 :position position))


 ;;; 基础数据结构定义

;; 标签结构：(name . fields)
(defun org-supertag-tag-p (obj)
  "判断是否为标签结构。"
  (and (consp obj)
       (stringp (car obj))
       (or (null (cdr obj))
           (consp (cdr obj)))))

;; 字段结构：(key . value)
(defun org-supertag-field-p (obj)
  "判断是否为字段结构。"
  (and (consp obj)
       (stringp (car obj))
       (stringp (cdr obj))))

;; 组合结构：(:type type :tags tags)
(defun org-supertag-combination-p (obj)
  "判断是否为组合结构。"
  (and (plist-get obj :type)
       (plist-get obj :tags)))

;;; 构造函数
(defun org-supertag-make-tag (name &optional fields)
  "创建标签结构。"
  (cons name fields))

(defun org-supertag-make-field (key value)
  "创建字段结构。"
  (cons key value))

(defun org-supertag-make-combination (type tags)
  "创建组合结构。"
  (list :type type :tags tags))                

;;; Test Helpers

(defun org-supertag-make-test-node (id content tags fields)
  "创建测试节点。
ID 是节点ID
CONTENT 是节点内容
TAGS 是标签列表
FIELDS 是字段列表，每个元素是 (field-name . field-value) 形式的 cons cell"
  (let ((node (org-supertag-make-node :id id
                                     :content content
                                     :tags tags
                                     :fields nil)))
    (dolist (field-spec fields)
      (when (consp field-spec)
        (let* ((name (if (stringp (car field-spec))
                        (car field-spec)
                      (error "Field name must be a string: %S" (car field-spec))))
               (value (cdr field-spec))
               (field (org-supertag-make-field
                      :name name
                      :type "text"
                      :value value)))
          (push field (oref node fields)))))
    (setf (oref node fields) (nreverse (oref node fields)))
    node))

;;; Methods

(cl-defmethod org-supertag-get-field ((node org-supertag-node) field-name)
  "Get field value by FIELD-NAME from NODE."
  (let ((field (cl-find field-name (oref node fields)
                        :key (lambda (f) (oref f name))
                        :test #'string=)))
    (when field
      (oref field value))))

(cl-defmethod org-supertag-set-field ((node org-supertag-node) field-name value)
  "Set field FIELD-NAME to VALUE in NODE."
  (let ((field (cl-find field-name (oref node fields)
                        :key (lambda (f) (oref f name))
                        :test #'string=)))
    (if field
        (oset field value value)
      (object-add-to-list node 'fields
                         (org-supertag-make-field
                          :name field-name
                          :type 'text
                          :value value)))))

(cl-defmethod org-supertag-add-reference ((node org-supertag-node) ref-node)
  "Add REF-NODE to NODE's references."
  (unless (member ref-node (oref node references))
    (object-add-to-list node 'references ref-node)
    (object-add-to-list ref-node 'backlinks node)))

(cl-defmethod org-supertag-remove-reference ((node org-supertag-node) ref-node)
  "Remove REF-NODE from NODE's references."
  (oset node references (remove ref-node (oref node references)))
  (oset ref-node backlinks (remove node (oref ref-node backlinks))))

;;; 添加继承规则的结构定义

(cl-defstruct (org-supertag-rule
               (:constructor org-supertag-rule-create)
               (:copier nil))
  "继承规则结构体
parent-tag: 父标签名称
child-tag: 子标签名称
fields: 要继承的字段列表 (nil 表示继承所有字段)
overrides: 覆盖规则，格式为 ((field-name . value) ...)"
  parent-tag     ; 父标签
  child-tag      ; 子标签
  fields         ; 继承的字段列表
  overrides)     ; 覆盖规则

;; 序列支持
(cl-defmethod org-supertag-rule-to-plist ((rule org-supertag-rule))
  "将规则转换为属性列表"
  (list :parent-tag (org-supertag-rule-parent-tag rule)
        :child-tag (org-supertag-rule-child-tag rule)
        :fields (org-supertag-rule-fields rule)
        :overrides (org-supertag-rule-overrides rule)))

(cl-defmethod org-supertag-plist-to-rule ((plist list))
  "从属性列表创建规则对象"
  (org-supertag-rule-create
   :parent-tag (plist-get plist :parent-tag)
   :child-tag (plist-get plist :child-tag)
   :fields (plist-get plist :fields)
   :overrides (plist-get plist :overrides)))

;; 添加字段访问器方法
(cl-defmethod org-supertag-field-name ((field org-supertag-field))
  "Get the name of the FIELD."
  (oref field name))

(cl-defmethod org-supertag-get-field-type-name ((field org-supertag-field))
  "Get the type name of the FIELD."
  (oref field type))

(cl-defmethod org-supertag-field-value ((field org-supertag-field))
  "Get the value of the FIELD."
  (oref field value))

(cl-defmethod org-supertag-field-inherit ((field org-supertag-field))
  "Get the inherit flag of the FIELD."
  (oref field inherit))

;; 修改字段合并方法
(cl-defmethod org-supertag-db-merge-fields ((base-fields list) (new-fields list) overrides)
  "合并字段列表，应用覆盖规则"
  (message "Merging fields: base=%S new=%S overrides=%S" 
          base-fields new-fields overrides)
  (let ((result (copy-sequence base-fields)))
    ;; 合并新字段
    (dolist (field new-fields)
      (let* ((field-name (org-supertag-field-name field))
             (override (assoc field-name overrides)))
        (if override
            ;; 使用覆盖值
            (let ((existing (cl-find field-name result
                                   :key #'org-supertag-field-name
                                   :test #'string=)))
              (if existing
                  (setf (oref existing value) (cdr override))
                (push (org-supertag-make-field
                       :name field-name
                       :type (org-supertag-get-field-type-name field)
                       :value (cdr override))
                      result)))
          ;; 使用新值（如果不存在）
          (unless (cl-find field-name result
                          :key #'org-supertag-field-name
                          :test #'string=)
            (push (copy-sequence field) result)))))
    (message "Merged result: %S" result)
    result))

(cl-defmethod org-supertag-merge-fields ((node org-supertag-node) (inherited-fields list))
  "将继承的字段合并到节点中。
NODE 是目标节点INHERITED-FIELDS 是要合并的字段列表。"
  (let ((current-fields (oref node fields)))
    (setf (oref node fields)
          (org-supertag-db-merge-fields current-fields inherited-fields nil))))

;; 添加字段值获取和设置的辅助函数
(cl-defmethod org-supertag-field-get-value ((field org-supertag-field))
  "获取字段值。"
  (oref field value))

(cl-defmethod org-supertag-field-set-value ((field org-supertag-field) value)
  "设置字段值。"
  (oset field value value))

;; 修改继承解析器中的字段处理
(defun org-supertag-resolve-inheritance (tag &optional db)
  "解析标签 TAG 的继承规则。"
  (message "Resolving inheritance for tag: %s" tag)
  (let* ((rules (org-supertag-get-rules-for-tag tag))
         (result nil))
    (message "Found rules for tag %s: %S" tag rules)
    
    ;; 处理每个规则
    (dolist (rule rules)
      (let* ((parent-tag (oref rule parent-tag))
             (parent-nodes (when db 
                            (org-supertag-db-get-nodes-by-tag db parent-tag)))
             (allowed-fields (oref rule fields))
             (overrides (oref rule overrides)))
        (message "Processing parent tag: %s, nodes: %S, allowed fields: %S" 
                parent-tag parent-nodes allowed-fields)
        
        ;; 首先应用覆盖
        (when overrides
          (message "Applying overrides: %S" overrides)
          (dolist (override overrides)
            (let* ((field-name (car override))
                   (field-value (cdr override)))
              (message "Adding override: %s = %s" field-name field-value)
              (push (cons field-name field-value) result))))
        
        ;; 从每个父节点收集字段
        (dolist (parent parent-nodes)
          (let ((parent-fields (oref parent fields)))
            (message "Processing parent fields: %S" parent-fields)
            
            ;; 合并允许的字段
            (dolist (field parent-fields)
              (let ((field-name (oref field name))
                    (field-value (org-supertag-field-get-value field)))
                (message "Checking field: %s = %s" field-name field-value)
                ;; 只继承允许的字段，且不覆盖已有的值
                (when (and (or (null allowed-fields)
                             (member field-name allowed-fields))
                         (not (assoc field-name result))
                         field-value)  ; 只继承非空值
                  (message "Inheriting field: %s = %s" field-name field-value)
                  (push (cons field-name field-value) result))))))))
    
    (let ((final-result (nreverse result)))
      (message "Final inherited fields: %S" final-result)
      final-result)))

;; 添加调试辅助函数
(defun org-supertag-debug-field (field)
  "打印字段的调试信息"
  (message "Field: name=%S type=%S value=%S inherit=%S"
          (oref field name)
          (oref field type)
          (oref field value)
          (oref field inherit)))

(defun org-supertag-debug-node (node)
  "打印节点的调试信息"
  (message "Node: id=%S content=%S tags=%S"
          (oref node id)
          (oref node content)
          (oref node tags))
  (message "Fields:")
  (dolist (field (oref node fields))
    (org-supertag-debug-field field)))

(provide 'org-supertag-models)
;;; org-supertag-models.el ends here 