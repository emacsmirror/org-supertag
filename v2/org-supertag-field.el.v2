;;; org-supertag-field.el --- Field management for org-supertag -*- lexical-binding: t; -*-

(require 'org)
(require 'eieio)
(require 'cl-lib)

;;----------------------------------------------------------------------
;; 基础变量定义
;;----------------------------------------------------------------------

(defcustom org-supertag-template-file
  (expand-file-name "org-supertag-templates.org"
                   user-emacs-directory)
  "存储字段模板的文件。仅用于字段定义和模板。")

(defvar org-supertag-field-types
  (make-hash-table :test 'equal)
  "字段类型注册表。
每个类型是一个 plist，包含：
- :validator  验证函数
- :formatter  格式化函数
- :description  类型描述")

(defvar org-supertag-field-values
  (make-hash-table :test 'equal)
  "字段值存储表。
Key: (node-id . field-name)
Value: field-value")

(defvar org-supertag-field-node-index
  (make-hash-table :test 'equal)
  "字段到节点的索引。
Key: field-name
Value: node-id 列表")

(defvar org-supertag-auto-save-timer nil
  "自动保存定时器。")

(defvar org-supertag-field-categories
  (make-hash-table :test 'equal)
  "字段分类注册表。")

;;----------------------------------------------------------------------
;; 持久化基础设施
;;----------------------------------------------------------------------

(defun org-supertag-ensure-template-file ()
  "确保模板文件存在且格式正确。"
  (unless (file-exists-p org-supertag-template-file)
    (with-temp-file org-supertag-template-file
      (insert "#+TITLE: Org SuperTag Templates\n\n"
              "* Field Types\n"
              "基本字段类型定义。\n\n"
              "* Field Templates\n"
              "字段模板定义。\n")))
  ;; 验证文件格式
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (unless (re-search-forward "^\\* Field Types" nil t)
       (error "模板文件格式错误：缺少 Field Types 部分"))
     (goto-char (point-min))
     (unless (re-search-forward "^\\* Field Templates" nil t)
       (error "模板文件格式错误：缺少 Field Templates 部分"))))
  ;; 处理文件锁
  (when (file-locked-p org-supertag-template-file)
    (unlock-file org-supertag-template-file)))

(defun org-supertag-setup-auto-save ()
  "设置自动保存。"
  (when org-supertag-auto-save-timer
    (cancel-timer org-supertag-auto-save-timer))
  (setq org-supertag-auto-save-timer
        (run-with-idle-timer 300 t #'org-supertag-save-all)))

(defun org-supertag-save-all ()
  "保存所有字段相关的数据。"
  (org-supertag-save-field-types)
  (org-supertag-save-field-templates)) 



;;----------------------------------------------------------------------
;; 索引系统
;;----------------------------------------------------------------------

(defun org-supertag-field-build-index ()
  "重建字段索引。"
  (clrhash org-supertag-field-index)
  (save-excursion
    (save-restriction
      (widen)
      (goto-char (point-min))
      (while (re-search-forward org-heading-regexp nil t)
        (let* ((element-begin (match-beginning 0))
               (node (copy-marker element-begin))
               (props (org-entry-properties node)))
          (dolist (prop props)
            (let ((field-name (car prop)))
              (when (org-supertag-field-p field-name)
                (puthash field-name node org-supertag-field-index)))))))))
                
(defun org-supertag-field-p (property-name)
  "判断 PROPERTY-NAME 是否是一个字段。"
  (or (gethash property-name org-supertag-fields)
      (gethash property-name org-supertag-field-index)))

(defun org-supertag-field-after-save-hook ()
  "保存 org 文件后更新字段索引。"
  (when (eq major-mode 'org-mode)
    (org-supertag-field-build-index)))

;;----------------------------------------------------------------------
;; 同步机制
;;----------------------------------------------------------------------

(defun org-supertag-sync-field-to-property (node-id)
  "将 NODE-ID 的字段值同步到 org properties。"
  (when-let* ((node (org-id-find node-id t))
              (fields (org-supertag-get-node-fields node-id)))
    (org-with-point-at node
      (dolist (field fields)
        (let* ((field-name (car field))
               (field-spec (org-supertag-get-field field-name))
               (prop-name (plist-get field-spec :name))
               (value (cdr field)))
          (when value
            (org-entry-put nil prop-name (format "%s" value))))))))

(defun org-supertag-sync-property-to-field (node-id)
  "将 org properties 同步到 NODE-ID 的字段值。"
  (when-let* ((node (org-id-find node-id t))
              (fields (org-supertag-get-node-fields node-id)))
    (org-with-point-at node
      (dolist (field fields)
        (let* ((field-name (car field))
               (field-spec (org-supertag-get-field field-name))
               (prop-name (plist-get field-spec :name))
               (value (org-entry-get nil prop-name)))
          (when value
            (org-supertag-set-field-value field-name value)))))))

(defun org-supertag-get-node-fields (node-id)
  "获取 NODE-ID 节点的所有字段。"
  (when-let* ((node (org-id-find node-id t)))
    (org-with-point-at node
      (let ((tags (org-get-tags))
            fields)
        (dolist (tag tags)
          (when-let ((field-spec (org-supertag-get-field tag)))
            (push (cons tag field-spec) fields)))
        fields))))

;; 自动同步钩子
(defun org-supertag-after-property-change (property value &optional pom)
  "Property 改后的同步处理。
PROPERTY 是属性名，
VALUE 是新的属性值，
POM 是可选的修改位置标记。"
  (when (org-supertag-field-p property)
    (let ((node-id (org-id-get)))
      (when node-id
        (org-supertag-sync-property-to-field node-id)))))

(add-hook 'org-property-changed-functions
          #'org-supertag-after-property-change)

;;----------------------------------------------------------------------
;; 清理机制
;;----------------------------------------------------------------------

(defun org-supertag-cleanup-field (supertag-name)
  "当 SUPERTAG-NAME 被删除时清理相关字段。"
  (when-let ((field (gethash supertag-name org-supertag-field-types)))
    ;; 清理字段定义
    (remhash supertag-name org-supertag-field-types)
    ;; 清理相关节点的字段值
    (maphash (lambda (node-id fields)
               (when (org-supertag-node-has-tag-p node-id supertag-name)
                 (remhash (plist-get field :name) fields)))
             org-supertag-field-index)))

(defun org-supertag-node-has-tag-p (node-id tag)
  "检查 NODE-ID 是否有 TAG。"
  (when-let ((node (org-id-find node-id t)))
    (org-with-point-at node
      (member tag (org-get-tags)))))

(defun org-supertag-field-cleanup ()
  "清理资源。"
  (condition-case err
      (progn
        (org-supertag-save-field-types)
        (when (and (boundp 'org-supertag-template-file)
                   (file-exists-p org-supertag-template-file))
          (unlock-file org-supertag-template-file)))
    (error (message "清理时发生错误: %S" err))))

;; 注册清理钩子
(add-hook 'kill-emacs-hook #'org-supertag-field-cleanup)

;;----------------------------------------------------------------------
;; 字段类型 (Field Types)
;;----------------------------------------------------------------------

(defvar org-supertag-field-types
  (make-hash-table :test 'equal)
  "字段类型注册表。
每个类型是一个 plist，包含：
- :validator  验证函数
- :formatter  格式化函数
- :description  类型描述")

(defun org-supertag-register-field-type (type spec)
  "注册字段类型。
TYPE 是类型名称（symbol），
SPEC 是包含 :validator 和 :formatter 的 plist。"
  (puthash type spec org-supertag-field-types))

(defun org-supertag-get-field-type (type)
  "获取字段类型定义。"
  (gethash type org-supertag-field-types))

;; 初始化基本字段类型
(defun org-supertag-init-field-types ()
  "初始化基本字段类型。"
  (clrhash org-supertag-field-types)
  
  ;; 字符串类型
  (org-supertag-register-field-type
   'string
   '(:validator stringp
     :formatter string-trim
     :description "基础字符串类型，接受任何非空文本"))
  
  ;; 数值类型
  (org-supertag-register-field-type
   'number
   '(:validator numberp
     :formatter number-to-string
     :description "数值类型，接受整数或浮点数"))
  
  ;; 枚举类型
  (org-supertag-register-field-type
   'enum
   '(:validator (lambda (x) (member x '("yes" "no")))
     :formatter identity
     :description "枚举类型，接受 yes 或 no")))



;;----------------------------------------------------------------------
;; 预设字段类型
;;----------------------------------------------------------------------



;; 注册字段类型
(defun org-supertag-init-field-types ()
  "初始化字段类型。"
  (clrhash org-supertag-field-types)
  
  ;; 字符串类型
  (org-supertag-register-field-type
   'string
   '(:validator org-supertag-validate-string
     :formatter org-supertag-format-string
     :description "基础字符串类型"))
  
  ;; 日期类型
  (org-supertag-register-field-type
   'date
   '(:validator org-supertag-validate-date
     :formatter org-supertag-format-date
     :description "日期类型 (YYYY-MM-DD)"))
  
  ;; 邮箱类型
  (org-supertag-register-field-type
   'email
   '(:validator org-supertag-validate-email
     :formatter org-supertag-format-email
     :description "电子邮箱地址"))
  
  ;; URL类型
  (org-supertag-register-field-type
   'url
   '(:validator org-supertag-validate-url
     :formatter org-supertag-format-url
     :description "URL地址"))
  
  ;; 引用类型
  (org-supertag-register-field-type
   'reference
   '(:validator org-supertag-validate-reference
     :formatter org-supertag-format-reference
     :description "引用其他带有特定标签的条目"
     :ref-tag nil))  ; 存储被引用的标签名
  
  ;; 选项类型
  (org-supertag-register-field-type
   'options
   '(:validator org-supertag-validate-options
     :formatter org-supertag-format-options
     :description "从预定义选项中选择")))

;;----------------------------------------------------------------------
;; 字段类型的验证器和格式化器
;;----------------------------------------------------------------------

(defun org-supertag-validate-string (value)
  "验证字符串 VALUE。"
  (stringp value))

(defun org-supertag-format-string (value)
  "格式化字符串 VALUE。"
  (string-trim value))

(defun org-supertag-validate-date (value)
  "验证日期 VALUE。"
  (condition-case nil
      (progn 
        (org-parse-time-string value)
        t)
    (error nil)))

(defun org-supertag-format-date (value)
  "格式化日期 VALUE。"
  (condition-case nil
      (let ((time (org-parse-time-string value)))
        (format-time-string "%Y-%m-%d" (apply #'encode-time time)))
    (error value)))

(defun org-supertag-validate-email (value)
  "验证邮箱 VALUE。"
  (and (stringp value)
       (string-match-p "^[^@]+@[^@]+\\.[^@]+$" value)))

(defun org-supertag-format-email (value)
  "格式化邮箱 VALUE。"
  (string-trim value))

(defun org-supertag-validate-url (value)
  "验证 URL VALUE。"
  (and (stringp value)
       (string-match-p "^https?://" value)))

(defun org-supertag-format-url (value)
  "格式化 URL VALUE。"
  (string-trim value))

(defun org-supertag-validate-reference (value)
  "验证引用值是否有效。
VALUE 应该是一个 org-id。"
  (and (stringp value)
       (org-id-find value 'marker)))

(defun org-supertag-format-reference (value)
  "格式化引用值。
将 org-id 格式化为可读的标题。"
  (when-let ((marker (org-id-find value 'marker)))
    (org-with-point-at marker
      (org-get-heading t t t t))))

(defun org-supertag-validate-options (value spec)
  "验证选项值。
VALUE 是要验证的值，
SPEC 是字段规格说明，包含 :options。"
  (let ((options (plist-get spec :options)))
    (and (stringp value)
         (member value options))))

(defun org-supertag-format-options (value _spec)
  "格式化选项值。"
  (string-trim value))

(defun org-supertag-validate-number (value)
  "验证数值类型的值。"
  (numberp value))

(defun org-supertag-format-number (value)
  "格式化数值类型的值。"
  (number-to-string value))

;; 初始化字段类型
(org-supertag-init-field-types)

;;----------------------------------------------------------------------
;; 字段类型持久化
;;----------------------------------------------------------------------

(defun org-supertag-load-field-types ()
  "从模板文件加载字段类型定义。"
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (when (re-search-forward "^\\* Field Types$" nil t)
       (while (re-search-forward "^\\*\\* \\(.+\\)$" nil t)
         (let* ((type-name (match-string 1))
                (validator (org-entry-get (point) "VALIDATOR"))
                (formatter (org-entry-get (point) "FORMATTER"))
                (description (org-entry-get (point) "DESCRIPTION")))
           (when (and validator formatter description)
             (org-supertag-register-field-type
              (intern type-name)
              `(:validator ,(read validator)
                :formatter ,(read formatter)
                :description ,description)))))))))

(defun org-supertag-load-field-types ()
  "从模板文件加载字段类型定义。"
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (when (re-search-forward "^\\* Field Types$" nil t)
       (while (re-search-forward "^\\*\\* \\(.+\\)$" nil t)
         (let* ((type-name (match-string 1))
                (validator (org-entry-get (point) "VALIDATOR"))
                (formatter (org-entry-get (point) "FORMATTER"))
                (description (org-entry-get (point) "DESCRIPTION")))
           (when (and validator formatter description)
             (org-supertag-register-field-type
              (intern type-name)
              `(:validator ,(read validator)
                :formatter ,(read formatter)
                :description ,description)))))))))

;;----------------------------------------------------------------------
;; 字段 (Fields)
;;----------------------------------------------------------------------


(defclass org-supertag-field ()
  ((name
    :initarg :name
    :accessor org-supertag-field-name
    :type string
    :documentation "字段名称")
   (type
    :initarg :type
    :accessor org-supertag-field-type
    :type symbol
    :documentation "字段类型")
   (constraints
    :initarg :constraints
    :accessor org-supertag-field-constraints
    :initform nil
    :documentation "字段约束")
   (id
    :initarg :id
    :accessor org-supertag-field-id
    :initform nil  ;; 设置默认值为 nil
    :documentation "字段ID"))
  "org-supertag 字段类")


(defun org-supertag-field-create (args)
  "创建一个新的字段。
ARGS 是一个 plist，包含以下关键字：
:name - 字段名称
:type - 字段类型
:constraints - 字段约束"
  (let* ((name (plist-get args :name))
         (type (plist-get args :type))
         (constraints (plist-get args :constraints))
         (id (format "field-%s-%s" name (org-id-uuid))))
    (message "\n=== 创建字段 ===")
    (message "参数:")
    (message "  名称: %S" name)
    (message "  类型: %S" type)
    (message "  约束: %S" constraints)
    (message "  ID: %S" id)
    (let ((field (make-instance 'org-supertag-field
                               :name name
                               :type type
                               :constraints constraints
                               :id id)))
      (message "创建的字段对象: %S" field)
      (message "字段ID: %S" (org-supertag-field-id field))
      ;; 将字段添加到数据库
      (org-supertag-db-add-field org-supertag-db field)
      field)))

(defvar org-supertag-fields
  (make-hash-table :test 'equal)
  "字段注册表。
每个字段是一个 plist，包含：
- :name    字段名称（会用作属性名）
- :type    字段类型（必须是已注册的类型）
- :tag     关联的标签（可选）
- :description  字段描述")

(defun org-supertag-register-field (field-name spec)
  "注册字段。
FIELD-NAME 是字段名称，
SPEC 是字段规格说明。"
  (let ((field-type (plist-get spec :type)))
    ;; 检查字段类型是否有效
    (org-supertag-validate-field-type field-type)
    
    ;; 如果类型有效，继续注册
    (let ((type-spec (gethash field-type org-supertag-field-types)))
      (puthash field-name
               (list :name (plist-get spec :name)
                     :type field-type
                     :validator (plist-get type-spec :validator)
                     :formatter (plist-get type-spec :formatter)
                     :description (plist-get spec :description))
               org-supertag-fields))))

(defun org-supertag-get-field (field-name)
  "获取字段定义。"
  (gethash field-name org-supertag-fields))

;; 初始化预设字段
(defun org-supertag-init-preset-fields ()
  "初始化预设字段。"
  (clrhash org-supertag-fields)
  
  ;; 地点字段
  (org-supertag-register-field
   "location"
   '(:name "LOCATION"
     :type string
     :tag "place"
     :description "地点信息")))


;;----------------------------------------------------------------------
;; 预设字段
;;----------------------------------------------------------------------

(defun org-supertag-init-preset-fields ()
  "初始化预设字段。"
  (clrhash org-supertag-fields)
  
  ;; 地点字段
  (org-supertag-register-field
   "location"
   '(:name "LOCATION"
     :type string
     :tag "place"
     :description "地点信息"))
  
  ;; 日期字段
  (org-supertag-register-field
   "date"
   '(:name "DATE"
     :type date
     :tag "date"
     :description "日期"))
  
  ;; 联系人字段
  (org-supertag-register-field
   "contact"
   '(:name "CONTACT"
     :type email
     :tag "contact"
     :description "联系人邮箱"))
  
  ;; 链接字段
  (org-supertag-register-field
   "link"
   '(:name "LINK"
     :type url
     :tag "link"
     :description "相关链接")))


;;----------------------------------------------------------------------
;; 字段值操作
;;----------------------------------------------------------------------
(cl-defmethod initialize-instance :after ((field org-supertag-field) &rest _args)
  "初始化字段对象。"
  (unless (slot-boundp field 'id)
    (let ((name (org-supertag-field-name field))
          (type (org-supertag-field-type field)))
      (setf (slot-value field 'id) (format "%s-%s" name type)))))


(defun org-supertag-create-field (&key name type constraints)
  "创建一个新的字段。
NAME 是字段名称
TYPE 是字段类型
CONSTRAINTS 是字段约束"
  (message "\n=== 创建字段 ===")
  (message "参数:")
  (message "  名称: %S" name)
  (message "  类型: %S" type)
  (message "  约束: %S" constraints)
  
  (let ((field (make-instance 'org-supertag-field
                             :name name
                             :type type
                             :constraints constraints)))
    (message "创建的字段对象: %S" field)
    (message "字段ID: %S" (org-supertag-field-id field))
    field))

(cl-defgeneric org-supertag-validate-field-value (field value)
  "验证字段值。
FIELD 可以是字段对象或字段名称。")

(defun org-supertag-test-member (value list)
  "测试 member 函数的行为。"
  (message "\n=== 测试 member 函数 ===")
  (message "值: %S" value)
  (message "列表: %S" list)
  (let ((result (member value list)))
    (message "member 返回值: %S" result)
    (message "member 返回值类型: %S" (type-of result))
    (message "member 返回值为空？ %S" (null result))
    result))

(cl-defmethod org-supertag-validate-field-value ((field org-supertag-field) value)
  "验证字段值。
FIELD 是字段对象
VALUE 是要验证的值"
  (let* ((type (org-supertag-field-type field))
         (type-spec (gethash type org-supertag-field-types))
         (validator (plist-get type-spec :validator))
         (constraints (org-supertag-field-constraints field)))
    (cond
     ;; options 类型
     ((eq type 'options)
      (let ((valid-values (plist-get constraints :values)))
        (member value valid-values)))
     
     ;; string 类型
     ((eq type 'string)
      (stringp value))
     
     ;; date 类型
     ((eq type 'date)
      (condition-case nil
          (org-parse-time-string value)
        (error nil)))
     
     ;; email 类型
     ((eq type 'email)
      (and (stringp value)
           (string-match-p "^[^@]+@[^@]+\\.[^@]+$" value)))
     
     ;; url 类型
     ((eq type 'url)
      (and (stringp value)
           (string-match-p "^https?://" value)))
     
     ;; 默认情况
     (t t))))

(defun org-supertag-debug-validation (field value)
  "调试验证过程。
FIELD 是字段对象
VALUE 是要验证的值"
  (message "\n=== 调试验证 ===")
  (message "字段: %S" field)
  (message "值: %S" value)
  (let ((result (org-supertag-validate-field-value field value)))
    (message "验证结果: %S" result)
    result))

(defun org-supertag-format-field-value (field-name value)
  "格式化字段值。
FIELD-NAME 是字段名称，
VALUE 是要格式化的值。"
  (if-let* ((field-spec (org-supertag-get-field field-name))
            (type (plist-get field-spec :type))
            (type-spec (org-supertag-get-field-type type))
            (formatter (plist-get type-spec :formatter)))
      (funcall formatter value)
    value))

(defun org-supertag-set-field-value (field-name value)
  "设置字段值。
FIELD-NAME 是字段名称，
VALUE 是要设置的值。"
  (when-let* ((field-spec (org-supertag-get-field field-name))
              (prop-name (plist-get field-spec :name)))
    (if (org-supertag-validate-field-value (org-supertag-create-field :name field-name :type (plist-get field-spec :type)) value)
        (let ((formatted-value (org-supertag-format-field-value 
                               field-name new-value))
          (org-entry-put nil prop-name formatted-value)
          t)  ; 返回 t 表示设置成功
      (signal 'org-supertag-validation-error 
              (list (format "Invalid value for %s: %S" field-name value)))))))

(defun org-supertag-get-field-value (field-name)
  "获取字段值。
FIELD-NAME 是字段名称。"
  (when-let* ((field-spec (org-supertag-get-field field-name))
              (prop-name (plist-get field-spec :name)))
    (org-entry-get nil prop-name)))

(defun org-supertag-validate-field-type (type-name)
  "验证字段类型是否有效。
TYPE-NAME 是要验证的字段类型名称。"
  (if (gethash type-name org-supertag-field-types)
      t
    (signal 'org-supertag-invalid-type-error 
            (list (format "Unknown field type: %S" type-name)))))

(defun org-supertag-find-field-tag (field-name)
  "查找与字段关联的标签。
如果字段存在于字段注册表中，返回字段名。"
  (when (gethash field-name org-supertag-fields)
    field-name))

;;----------------------------------------------------------------------
;; 用户交互命令
;;----------------------------------------------------------------------

(defun org-supertag-get-field-types ()
  "获取所有已注册的字段类型列表。"
  (let (types)
    (maphash (lambda (k _v) (push k types))
             org-supertag-field-types)
    types))

(defun org-supertag-get-fields ()
  "获取所有已注册的字段列表。"
  (sort (hash-table-keys org-supertag-fields) #'string<))


;;;###autoload
(defun org-supertag-define-field-type ()
  "定义新的字段类型。"
  (interactive)
  (let* ((type-name (read-string "类型名称: "))
         (validator (read-string "验证函数: "))
         (formatter (read-string "格式化函数: "))
         (description (read-string "描述: ")))
    (org-supertag-register-field-type
     (intern type-name)
     (list :validator (intern validator)
           :formatter (intern formatter)
           :description description))))


(defun org-supertag-add-field-to-tag (tag-name)
  "为标签 TAG-NAME 添加字段。"
  (interactive "sTag name: ")
  (let* ((field-name (read-string "Field name: "))
         (field-type (completing-read "Field type: "
                                    (org-supertag-get-field-types)
                                    nil t))
         (type-spec (org-supertag-get-field-type (intern field-type))))
    (message "正在添加字段：名称=%s, 类型=%s, 标签=%s"
             field-name field-type tag-name)
    (if (org-supertag-register-field
         field-name
         (list :name field-name
               :type (intern field-type)
               :tag tag-name
               :validator (plist-get type-spec :validator)
               :formatter (plist-get type-spec :formatter)
               :description (format "%s field for %s"
                                  field-type tag-name)))
        (progn
          (message "字段添加成功：%s" field-name)
          (when (and (org-at-heading-p)
                    (y-or-n-p "是否为当前条目添加此字段？"))
            (org-entry-put nil field-name "")
            (org-toggle-tag tag-name 'on)))
      (message "字段添加失败：%s" field-name))))

;;----------------------------------------------------------------------
;; 字段输入改进
;;----------------------------------------------------------------------

;; 日期类型输入改进
(defun org-supertag-input-date ()
  "交互式输入日期。"
  (let* ((default-time (current-time))
         (org-read-date-prefer-future nil)
         (time-str (org-read-date nil t nil "输入日期: "
                                 default-time)))
    (format-time-string "%Y-%m-%d" time-str)))

;; URL类型输入改进
(defun org-supertag-input-url ()
  "交互式输入URL。"
  (let* ((url (read-string "输入URL: "))
         (parsed-url (url-generic-parse-url url)))
    (if (and (url-type parsed-url)
             (url-host parsed-url))
        url
      (when (y-or-n-p "URL格式可能不正确，是否添加 https:// 前缀？")
        (concat "https://" url)))))

;; 邮箱类型输入改进
(defun org-supertag-input-email ()
  "交互式输入邮箱地址。"
  (let ((email (read-string "输入邮箱地址: ")))
    (while (not (string-match-p "^[^@]+@[^@]+\\.[^@]+$" email))
      (setq email (read-string "邮箱格式不正确，请重新输入: ")))
    email))

;; 引用类型输入改进
(defun org-supertag-input-reference ()
  "交互式输入引用。"
  (let* ((candidates (org-supertag-collect-reference-candidates))
         (action (completing-read 
                 "选择操作: "
                 '("搜索条目" "按标签筛选" "最近条目")
                 nil t))
         (selected
          (pcase action
            ("搜索条目"
             (let* ((pattern (read-string "搜索关键词: "))
                    (matches (seq-filter
                             (lambda (c)
                               (string-match-p pattern (cdr c)))
                             candidates)))
               (completing-read "选择条目: "
                              (mapcar #'cdr matches)
                              nil t)))
            ("按标签筛选"
             (let* ((tag (completing-read "选择标签: "
                                        (org-get-buffer-tags)))
                    (matches (org-supertag-get-entries-with-tag tag)))
               (completing-read "选择条目: "
                              (mapcar #'cdr matches)
                              nil t)))
            ("最近条目"
             (completing-read "选择条目: "
                            (mapcar #'cdr 
                                    (seq-take candidates 10))
                            nil t)))))
    (car (rassoc selected candidates))))

;; 改进字段编辑函数
(defun org-supertag-edit-field (field-name)
  "编辑字段值。"
  (interactive
   (list (completing-read "选择字段: " (org-get-tags) nil t)))
  (if-let* ((field-spec (org-supertag-get-field field-name))
            (field-type (plist-get field-spec :type)))
      (let ((current-value (org-entry-get nil field-name))
            new-value)
        (setq new-value
              (pcase field-type
                ('date (org-supertag-input-date))
                ('url (org-supertag-input-url))
                ('email (org-supertag-input-email))
                ('reference (org-supertag-input-reference))
                ('options (org-supertag-edit-options-field field-name))
                (_ (read-string (format "%s: " field-name)
                              (or current-value "")))))
        (when new-value
          (if (org-supertag-validate-field-value (org-supertag-create-field :name field-name :type field-type) new-value)
              (progn
                (org-entry-put nil field-name 
                              (org-supertag-format-field-value 
                               field-name new-value))
            (message "无效的值: %s" new-value))))
    (message "未找到字段定义: %s" field-name))))

;; 辅助函数
(defun org-supertag-get-entries-with-tag (tag)
  "获取带有特定标签的条目。"
  (let (entries)
    (org-map-entries
     (lambda ()
       (let ((id (org-id-get-create))
             (heading (org-get-heading t t t t)))
         (push (cons id heading) entries)))
     (format "+%s" tag))
    (nreverse entries)))

;; 改进模板定义中的字段输入
(defun org-supertag-define-field-template ()
  "定义新的字段模板。"
  (interactive)
  (let* ((tag-name (read-string "模板名称: "))
         (template nil))
    (while (y-or-n-p "添加字段？")
      (let* ((field-name (read-string "字段名称: "))
             (field-type (completing-read 
                         "字段类型: "
                         (org-supertag-get-field-types)
                         nil t nil nil "string"))  ; 默认类型为string
             (required (y-or-n-p "是否必填？"))
             (field-spec
              `(,field-name . (:type ,(intern field-type)
                             :required ,required))))
        ;; 根据字段类型添加特殊属性
        (pcase (intern field-type)
          ('reference
           (let* ((ref-scope (completing-read 
                             "引用范围: "
                             '("当前文件" "所有文件" "指定标签")
                             nil t))
                  (ref-tag (when (equal ref-scope "指定标签")
                            (completing-read "引用标签: "
                                          (org-get-buffer-tags)))))
                     (when ref-tag
                       (setf (cdr field-spec)
                             (plist-put (cdr field-spec) :ref-tag ref-tag))))))
          ('options
           (let ((options (org-supertag-input-options)))
                 (when options
                   (setf (cdr field-spec)
                         (plist-put (cdr field-spec) :options options))))))
        (push field-spec template)))
    
    (when template
      (org-supertag-save-field-template tag-name (nreverse template))
      (message "字段模板 #%s 已保存。" tag-name))))

;;----------------------------------------------------------------------
;; 模板系统 - 数据结构
;;----------------------------------------------------------------------

(defvar org-supertag-field-templates
  (make-hash-table :test 'equal)
  "字段模板注册表。
Key: tag-name (不带 # 前缀)
Value: alist of (field-name . field-spec)")

;;----------------------------------------------------------------------
;; 模板文件操作
;;----------------------------------------------------------------------

(defun org-supertag-ensure-template-file ()
  "确保模板文件存在且可访问。"
  (unless (file-exists-p org-supertag-template-file)
    (with-temp-file org-supertag-template-file
      (insert "#+TITLE: Org SuperTag Templates\n\n"
              "* Field Types\n"
              "基本字段类型定义。\n\n"
              "* Field Templates\n"
              "字段模板定义。\n")))
  ;; 处理文件锁
  (when (file-locked-p org-supertag-template-file)
    (unlock-file org-supertag-template-file)))

(defun org-supertag-find-templates-section ()
  "在模板文件中找到或创建模板部分。"
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (unless (re-search-forward "^\\* Field Templates" nil t)
       (goto-char (point-max))
       (insert "\n* Field Templates\n"))
     (point-marker))))

(defun org-supertag-save-field-template (tag-name template)
  "保存字段模板。
TAG-NAME 是模板标签名，
TEMPLATE 是字段模板定义。"
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (unless (re-search-forward "^\\* Field Templates$" nil t)
       (goto-char (point-max))
       (insert "\n* Field Templates\n"))
     
     ;; 删除已存在的模板
     (when (re-search-forward (format "^\\*\\* #%s$" tag-name) nil t)
       (beginning-of-line)
       (let ((start (point)))
         (forward-line)
         (while (and (not (looking-at "^\\*"))
                    (not (eobp)))
           (forward-line))
         (delete-region start (point))))
     
     ;; 插入新模板
     (goto-char (org-supertag-find-templates-section))
     (insert (format "\n** #%s\n" tag-name))
     (org-set-property "FIELDS" (format "%S" template))
     (save-buffer))))

(defun org-supertag-load-field-template (tag-name)
  "加载字段模板。
TAG-NAME 是模板标签名。"
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (when (re-search-forward (format "^\\*\\* #%s$" tag-name) nil t)
       (let ((fields (org-entry-get (point) "FIELDS")))
         (when fields
           (read fields)))))))

;;----------------------------------------------------------------------
;; 引用系统
;;----------------------------------------------------------------------

(defun org-supertag-edit-reference-field (field-name)
  "编辑引用类型字段。"
  (let* ((field-spec (org-supertag-get-field field-name))
         (ref-tag (plist-get field-spec :ref-tag))
         ;; 获取所有带有特定标签的节点
         (candidates (org-supertag-get-nodes-with-tag ref-tag))
         ;; 让用户选择一个操作
         (action (completing-read 
                  (format "选择操作: ")
                  '("选择已有条目" "跳转到当前引用" "清除引用")
                  nil t))
         (selected
          (pcase action
            ("选择已有条目"
             (completing-read 
              (format "选择 %s: " ref-tag)
              candidates))
            ("跳转到当前引用"
             (let ((current-value (org-entry-get nil field-name)))
               (when current-value
                 (org-id-goto current-value))))
            ("清除引用"
             (org-entry-put nil field-name "")
             nil)))
         ;; 获取选中节点的 ID
         (node-id (when selected
                    (org-id-get-create selected))))
    (when node-id
      (org-supertag-set-field-value field-name node-id))))

(defun org-supertag-collect-reference-candidates ()
  "收集可引用的条目。"
  (let (candidates)
    (org-map-entries
     (lambda ()
       (let ((id (org-id-get-create))
             (heading (org-get-heading t t t t)))
         (push (cons id heading) candidates)))
     "+" t)
    (nreverse candidates)))

;;----------------------------------------------------------------------
;; 选项类型
;;----------------------------------------------------------------------

(defun org-supertag-input-options ()
  "交互式输入选项。"
  (let ((options nil)
        option)
    ;; 循环输入选项
    (while (setq option (read-string 
                        (format "添加选项%s (留空结束): "
                              (if options 
                                  (format "，当前: %s" 
                                        (mapconcat #'identity options " "))
                                ""))))
      (unless (string-empty-p option)
        (push option options)))
    
    ;; 返回选项列表
    (when options
      (vconcat (nreverse options)))))

(defun org-supertag-edit-options-field (field-name)
  "编辑选项类型字段。"
  (let* ((field-spec (org-supertag-get-field field-name))
         (options (plist-get field-spec :options))
         (current-value (org-entry-get nil field-name))
         ;; 使用 completing-read 并添加更多提示信息
         (prompt (format "%s (%s): " 
                        field-name 
                        (mapconcat #'identity options " | ")))
         (selected (completing-read prompt options nil t nil nil current-value)))
    (when selected
      (org-entry-put nil field-name selected)
      (message "已选择 %s: %s" field-name selected))))

;;----------------------------------------------------------------------
;; 模板系统 - 加载和保存
;;----------------------------------------------------------------------

(defun org-supertag-load-field-templates ()
  "从模板文件加载所有字段模板。"
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (unless (re-search-forward "^\\* Field Templates$" nil t)
       (error "模板文件格式错误：缺少 Field Templates 部分"))
     
     ;; 清空现有模板
     (clrhash org-supertag-field-templates)
     
     ;; 加载所有模板
     (while (re-search-forward "^\\*\\* #\\(.+\\)$" nil t)
       (let* ((tag-name (match-string 1))
              (fields-str (org-entry-get (point) "FIELDS")))
         (when fields-str
           (condition-case err
               (let ((fields (read fields-str)))
                     (puthash tag-name fields org-supertag-field-templates))
                 (error
                  (signal 'org-supertag-template-error
                         (list (format "模板 #%s 格式错误: %s"
                                     tag-name
                                     (error-message-string err))))))))))))  

(defun org-supertag-load-field-types ()
  "从模板文件加载字段类型定义。"
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (when (re-search-forward "^\\* Field Types$" nil t)
       (while (re-search-forward "^\\*\\* \\(.+\\)$" nil t)
         (let* ((type-name (match-string 1))
                (validator (org-entry-get (point) "VALIDATOR"))
                (formatter (org-entry-get (point) "FORMATTER"))
                (description (org-entry-get (point) "DESCRIPTION")))
           (when (and validator formatter description)
             (org-supertag-register-field-type
              (intern type-name)
              `(:validator ,(read validator)
                :formatter ,(read formatter)
                :description ,description)))))))))

(defun org-supertag-save-field-types ()
  "保存字段类型定义到模板文件。"
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (unless (re-search-forward "^\\* Field Types$" nil t)
       (goto-char (point-max))
       (insert "\n* Field Types\n"))
     
     ;; 删除现有字段类型定义
     (let ((types-end (save-excursion
                       (if (re-search-forward "^\\* " nil t)
                           (point)
                         (point-max)))))
       (delete-region (point) types-end))
     
     ;; 保存所有字段类型定义
     (maphash
      (lambda (type-name type-spec)
        (insert (format "\n** %s\n" type-name))
        (org-entry-put (point) "VALIDATOR"
                      (format "%S" (plist-get type-spec :validator)))
        (org-entry-put (point) "FORMATTER"
                      (format "%S" (plist-get type-spec :formatter)))
        (org-entry-put (point) "DESCRIPTION"
                      (plist-get type-spec :description)))
      org-supertag-field-types)
     (save-buffer))))

;;----------------------------------------------------------------------
;; 模板编辑界面
;;----------------------------------------------------------------------

(defun org-supertag-input-options ()
  "交互式输入选项列表。"
  (let ((options nil)
        option)
    ;; 循环输入选项
    (while (setq option (read-string 
                        (format "添加选项%s (留空结束): "
                              (if options 
                                  (format "，当前: %s" 
                                        (mapconcat #'identity options " "))
                                ""))))
      (unless (string-empty-p option)
        (push option options)))
    
    ;; 返回选项列表
    (when options
      (vconcat (nreverse options)))))

(defun org-supertag-edit-options-field (field-name)
  "编辑选项类型字段。"
  (let* ((field-spec (org-supertag-get-field field-name))
         (options (plist-get field-spec :options))
         (current-value (org-entry-get nil field-name))
         ;; 使用 completing-read 并添加更多提示信息
         (prompt (format "%s (%s): " 
                        field-name 
                        (mapconcat #'identity options " | ")))
         (selected (completing-read prompt options nil t nil nil current-value)))
    (when selected
      (org-entry-put nil field-name selected)
      (message "已选择 %s: %s" field-name selected))))

;;;###autoload
(defun org-supertag-define-field-template ()
  "定义新的字段模板。"
  (interactive)
  (let* ((tag-name (read-string "模板名称: "))
         (template nil))
    (while (y-or-n-p "添加字段？")
      (let* ((field-name (read-string "字段名称: "))
             (field-type (completing-read 
                         "字段类型: "
                         (org-supertag-get-field-types)
                         nil t nil nil "string"))  ; 默认类型为string
             (required (y-or-n-p "是否必填？"))
             (field-spec
              `(,field-name . (:type ,(intern field-type)
                             :required ,required))))
        ;; 根据字段类型添加特殊属性
        (pcase (intern field-type)
          ('reference
           (let* ((ref-scope (completing-read 
                             "引用范围: "
                             '("当前文件" "所有文件" "指定标签")
                             nil t)))
                     (when (equal ref-scope "指定标签")
                       (let ((ref-tag (completing-read "引用标签: "
                                                     (org-get-buffer-tags))))
                             (setf (cdr field-spec)
                                   (plist-put (cdr field-spec) :ref-tag ref-tag))))))
          ('options
           (let ((options (org-supertag-input-options)))
                 (when options
                   (setf (cdr field-spec)
                         (plist-put (cdr field-spec) :options options)))))
        (push field-spec template)))
    
    (when template
      (org-supertag-save-field-template tag-name (nreverse template))
      (message "字段模板 #%s 已保存。" tag-name)))))

;;;###autoload
(defun org-supertag-edit-field-template (tag-name)
  "交互式编辑 TAG-NAME 的字段模板。"
  (interactive "sTag name (without #): ")
  (let* ((existing-template (org-supertag-load-field-template tag-name))
         (template nil))
         ;; 显示现有模板信息
         (when existing-template
           (message "编辑现有模板 #%s，包含 %d 个字段"
                    tag-name (length existing-template)))
         ;; 收集字段定义
         (while (y-or-n-p "添加字段？")
           (let* ((field-name (read-string "字段名称: "))
                  (field-type (completing-read "字段类型: "
                                             (org-supertag-get-field-types)
                                             nil t))
                  (required (y-or-n-p "是否必填？"))
                  (field-spec
                   `(,field-name . (:type ,(intern field-type)
                                  :required ,required))))
             ;; 处理引用类型的特殊属性
             (when (eq (intern field-type) 'reference)
               (let ((ref-scope (completing-read 
                                "引用范围: "
                                '("当前文件" "所有文件" "指定标签")
                                nil t)))
                     (when (equal ref-scope "指定标签")
                       (let ((ref-tag (completing-read "引用标签: "
                                                     (org-get-buffer-tags))))
                             (setf (cdr field-spec)
                                   (plist-put (cdr field-spec) :ref-tag ref-tag))))))
             ;; 处理选项类型的特殊属性
             (when (eq (intern field-type) 'options)
               (let ((options (org-supertag-input-options)))
                     (when options
                       (setf (cdr field-spec)
                             (plist-put (cdr field-spec) :options options)))))
             (push field-spec template)))
         ;; 保存模板
         (when template
           (org-supertag-save-field-template tag-name (nreverse template))
           (message "字段模板 #%s 已保存。" tag-name))))

(defun org-supertag-list-field-templates ()
  "列出所有可用的字段模板。"
  (interactive)
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (let ((templates nil))
       (while (re-search-forward "^\\*\\* #\\(.+\\)$" nil t)
         (push (match-string 1) templates))
       (if templates
           (message "可用的模板: %s"
                    (mapconcat #'identity (nreverse templates) ", "))
         (message "还没有定义任何模板。"))))))

(defun org-supertag-view-field-template (tag-name)
  "查看 TAG-NAME 字段模板。"
  (interactive
   (list (completing-read "选择模板: "
                         (with-current-buffer 
                             (find-file-noselect org-supertag-template-file)
                           (org-with-wide-buffer
                            (goto-char (point-min))
                            (let ((tags nil))
                              (while (re-search-forward "^\\*\\* #\\(.+\\)$" nil t)
                                (push (match-string 1) tags))
                              (nreverse tags)))))))
  (when-let ((template (org-supertag-load-field-template tag-name)))
    (with-current-buffer (get-buffer-create "*SuperTag Template*")
      (erase-buffer)
      (insert (format "字段模板 #%s:\n\n" tag-name))
      (dolist (field template)
        (let* ((name (car field))
               (props (cdr field))
               (type (plist-get props :type))
               (required (plist-get props :required)
               (options (plist-get props :options)))
          (insert (format "- %s (%s%s%s)\n"
                         name
                         type
                         (if required ", 必填" "")
                         (if options 
                             (format ", 选项: %s" options) 
                           "")))))
      (special-mode)
      (display-buffer (current-buffer))))))


;;----------------------------------------------------------------------
;; 标签继承系统
;;----------------------------------------------------------------------

(defvar org-supertag-field-inheritance
  (make-hash-table :test 'equal)
  "字段继承规则映射。")

(defun org-supertag-inherit-fields (parent-field child-field)
  "使子字段继承父字段的字段。"
  (let ((parent-template (org-supertag-load-field-template parent-field)))
    (when parent-template
      ;; 记录继承关系
      (puthash child-field 
               parent-field
               org-supertag-field-inheritance)
      ;; 合并字段定义
      (org-supertag-merge-field-templates child-field parent-template))))

(defun org-supertag-merge-field-templates (child-field parent-fields)
  "合并父字段到子字段。
处理字段覆盖和冲突。"
  (let ((child-template (org-supertag-load-field-template child-field)))
    ;; 创建字段映射
    (let ((field-map (make-hash-table :test 'equal)))
      ;; 先添加子字段的字段
      (dolist (field child-template)
        (puthash (car field) field field-map))
      ;; 添加未被覆盖的父字段
      (dolist (field parent-fields)
        (unless (gethash (car field) field-map)
          (puthash (car field) 
                  (cons (car field)
                        (plist-put (cdr field) :inherited t))
                  field-map)))
      ;; 保存合并后的模板
      (org-supertag-save-field-template 
       child-field
       (hash-table-values field-map)))))

(defun org-supertag-get-inherited-fields (field-name)
  "获取字段继承的所有字段。"
  (when-let ((inheritance (gethash field-name org-supertag-field-inheritance)))
    (cdr inheritance)))

;; 扩展字段验证以支持继承
(defun org-supertag-validate-field-value (field-name value)
  "验证字段值，支持继承的字段。"
  (if-let* ((field-spec (or (org-supertag-get-field field-name)
                           ;; 查找继承的字段
                           (when-let ((field (org-supertag-find-field-tag field-name)))
                                      (org-supertag-get-inherited-field field field-name))))
            (type (plist-get field-spec :type))
            (type-spec (org-supertag-get-field-type type))
            (validator (plist-get type-spec :validator)))
      (funcall validator value)
    t))

;; 扩展现有的字段添加函数
(defun org-supertag-add-field-to-node (node-id field-name)
  "为节点添加字段，包含关系验证。"
  (if-let ((validation-result (org-supertag-validate-field-addition node-id field-name)))
      (if (eq validation-result t)
          (progn
            ;; 执行字段添加
            (org-with-point-at (org-id-find node-id t)
              (org-entry-put nil field-name ""))
            ;; 处理继承的字段
            (when-let ((parent-fields (org-supertag-get-inherited-fields field-name)))
                        (org-supertag-apply-inherited-fields node-id parent-fields))
              t)
        (message "%s" validation-result)
        nil)
    (message "字段添加验证失败")
    nil))

;;----------------------------------------------------------------------
;; 初始化和清理
;;----------------------------------------------------------------------

(defun org-supertag-field-init ()
  "初始化字段系统。"
  (org-supertag-ensure-template-file)
  (org-supertag-load-field-types) 
  (org-supertag-load-field-templates)
  (org-supertag-field-build-index)
  (org-supertag-setup-auto-save))


;;----------------------------------------------------------------------
;; 钩子设置
;;----------------------------------------------------------------------

;; 添加属性变更钩子
(defun org-supertag-setup-property-change-hook ()
  "设置属性变更钩子。"
  (advice-add 'org-entry-put :after
              (lambda (pom property value)
                (org-supertag-after-property-change property value pom))))

;; 文件保存时更新索引
(add-hook 'after-save-hook #'org-supertag-field-after-save-hook)

;; 退出 Emacs 时保存数据
(add-hook 'kill-emacs-hook #'org-supertag-field-cleanup)

;; 在初始化时设置钩子
(add-hook 'org-mode-hook #'org-supertag-setup-property-change-hook)

;;----------------------------------------------------------------------
;; 快捷键设定
;;----------------------------------------------------------------------
;; 字段操作
(define-key org-mode-map (kbd "C-c f +") #'org-supertag-add-field-to-entry)
(define-key org-mode-map (kbd "C-c f e") #'org-supertag-edit-field)
(define-key org-mode-map (kbd "C-c f -") #'org-supertag-remove-field-from-entry)
(define-key org-mode-map (kbd "C-c f a") #'org-supertag-edit-all-fields)

;; 字段类型操作
(define-key org-mode-map (kbd "C-c f t n") #'org-supertag-define-field-type)
(define-key org-mode-map (kbd "C-c f t e") #'org-supertag-edit-field-type)
(define-key org-mode-map (kbd "C-c f t d") #'org-supertag-remove-field-type)
(define-key org-mode-map (kbd "C-c f t l") #'org-supertag-list-field-types)

;; 菜单
(easy-menu-define org-supertag-menu org-mode-map
  "Menu for Org SuperTag"
  '("SuperTag"
    ["添加字段" org-supertag-add-field-to-entry t]
    ["编辑字段" org-supertag-edit-field t]
    ["编辑所有字段" org-supertag-edit-all-fields t]
    ["移除字段" org-supertag-remove-field-from-entry t]
    "---"
    ["定义新字段类型" org-supertag-define-field-type t]
    ["编辑字段类型" org-supertag-edit-field-type t]
    ["删除字段类型" org-supertag-remove-field-type t]
    ["查看字段类型" org-supertag-list-field-types t]))


;;----------------------------------------------------------------------
;; 次要模式定义
;;----------------------------------------------------------------------

(define-minor-mode org-supertag-mode
  "Toggle Org SuperTag mode.
With a prefix argument ARG, enable Org SuperTag mode if ARG is positive,
and disable it otherwise. If called from Lisp, enable the mode if ARG is
omitted or nil."
  :init-value nil
  :lighter " SuperTag"
  :group 'org-supertag
  (if org-supertag-mode
      (progn
        ;; 启用模式时的操作
        (org-supertag-field-init)
        (org-supertag-setup-property-change-hook))
    ;; 禁用模式时的操作
    (org-supertag-field-cleanup)
    ;; 移除属性变更钩子
    (advice-remove 'org-entry-put #'org-supertag-after-property-change)))

;;----------------------------------------------------------------------
;; 错误类型定义
;;----------------------------------------------------------------------

(define-error 'org-supertag-error "Org SuperTag Error")
(define-error 'org-supertag-invalid-type-error 
  "Invalid field type" 'org-supertag-error)
(define-error 'org-supertag-validation-error 
  "Field validation error" 'org-supertag-error)
(define-error 'org-supertag-template-error 
  "Template error" 'org-supertag-error)

;; 新增的变量和函数
(defvar org-supertag-field-inheritance (make-hash-table :test 'equal)
  "字段继承规则映射。")

(defvar org-supertag-field-combinations (make-hash-table :test 'equal)
  "字段组合关系表。
Key: 字段名
Value: (allowed-fields . forbidden-fields)")

(defvar org-supertag-field-exclusions (make-hash-table :test 'equal)
  "字段互斥关系表。
Key: 字段名
Value: 互斥的字段列表")

(defun org-supertag-add-field-inheritance (parent-field child-field)
  "添加字段继承规则。"
  (puthash child-field parent-field org-supertag-field-inheritance))

(defun org-supertag-add-field-combination (field1 field2)
  "添加字段组合规则。"
  (let* ((field1-rules (gethash field1 org-supertag-field-combinations '()))
         (field2-rules (gethash field2 org-supertag-field-combinations '())))
    (puthash field1 (cl-union field1-rules (list field2) :test #'equal) org-supertag-field-combinations)
    (puthash field2 (cl-union field2-rules (list field1) :test #'equal) org-supertag-field-combinations)))

(defun org-supertag-add-field-exclusion (field1 field2)
  "添加字段互斥规则。"
  (let* ((field1-exclusions (gethash field1 org-supertag-field-exclusions '()))
         (field2-exclusions (gethash field2 org-supertag-field-exclusions '())))
    (puthash field1 (cl-union field1-exclusions (list field2) :test #'equal) org-supertag-field-exclusions)
    (puthash field2 (cl-union field2-exclusions (list field1) :test #'equal) org-supertag-field-exclusions)))

(defun org-supertag-fields-can-combine? (field1 field2)
  "检查两个字段是否可以组合。"
  (and 
   (not (org-supertag-fields-excluded? field1 field2))
   (or 
    (member field2 (car (gethash field1 org-supertag-field-combinations)))
    (member field1 (car (gethash field2 org-supertag-field-combinations))))))

(defun org-supertag-fields-excluded? (field1 field2)
  "检查两个字段是否互斥。"
  (or 
   (member field2 (cdr (gethash field1 org-supertag-field-exclusions)))
   (member field1 (cdr (gethash field2 org-supertag-field-exclusions)))))

(defun org-supertag-field-debug-info (field)
  "输出字段的调试信息"
  (format "Field[name=%S type=%S constraints=%S value=%S]"
          (org-supertag-field-name field)
          (org-supertag-field-type field)
          (org-supertag-field-constraints field)
          (org-supertag-field-value field)))

(cl-defmethod cl-print-object ((field org-supertag-field) stream)
  "自定义字段对象的打印方法"
  (princ (org-supertag-field-debug-info field) stream))

(defalias 'org-supertag-field-create 'org-supertag-create-field)

(defun org-supertag-field-get (field-id)
  "根据 FIELD-ID 获取字段实例。"
  (unless org-supertag-db
    (error "No database instance available"))
  (org-supertag-db-get-field org-supertag-db field-id))

(cl-defmethod org-supertag-field-value ((field org-supertag-field))
  "获取字段的值。"
  (oref field value))

(cl-defmethod org-supertag-field-set-value ((field org-supertag-field) value)
  "设置字段的值为 VALUE。"
  (oset field value value))

(cl-defmethod initialize-instance :after ((field org-supertag-field) &rest _)
  "初始化后将字段保存到数据库。"
  (when org-supertag-db
    (org-supertag-db-set-field org-supertag-db field)))

(provide 'org-supertag-field)
