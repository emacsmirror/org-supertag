;;; 引用序列化

(defun org-supertag-node-serialize-references (node)
  "序列化节点的引用关系.
NODE 是节点对象"
  (unless (org-supertag-node-p node)
    (error "Node must be an org-supertag-node object"))
  
  (let* ((refs-to (org-supertag-node-refs-to node))
         (refs-from (org-supertag-node-refs-from node))
         (ref-count (org-supertag-node-ref-count node)))
    ;; 将引用关系序列化为属性
    (org-entry-put (point) "REFS_TO" (mapconcat #'identity refs-to " "))
    (org-entry-put (point) "REFS_FROM" (mapconcat #'identity refs-from " "))
    (org-entry-put (point) "REF_COUNT" (number-to-string ref-count))))

(defun org-supertag-node-deserialize-references (node)
  "反序列化节点的引用关系.
NODE 是节点对象"
  (unless (org-supertag-node-p node)
    (error "Node must be an org-supertag-node object"))
  
  (let* ((refs-to-str (org-entry-get (point) "REFS_TO"))
         (refs-from-str (org-entry-get (point) "REFS_FROM"))
         (ref-count-str (org-entry-get (point) "REF_COUNT"))
         (refs-to (when refs-to-str
                   (split-string refs-to-str " " t)))
         (refs-from (when refs-from-str
                     (split-string refs-from-str " " t)))
         (ref-count (when ref-count-str
                     (string-to-number ref-count-str))))
    ;; 更新节点的引用关系
    (setf (org-supertag-node-refs-to node) refs-to)
    (setf (org-supertag-node-refs-from node) refs-from)
    (setf (org-supertag-node-ref-count node) (or ref-count 0))))

;;; 引用缓存

(defvar org-supertag-node--reference-cache (make-hash-table :test 'equal)
  "节点引用关系的缓存.
键是节点ID，值是一个 plist:
(:refs-to [引用的节点ID列表]
 :refs-from [被引用的节点ID列表]
 :ref-count [引用计数]
 :timestamp [最后更新时间戳])")

(defvar org-supertag-node-cache-ttl 300
  "引用缓存的有效期（秒）.")

(defun org-supertag-node--cache-get (node-id)
  "从缓存获取节点的引用关系.
NODE-ID 是节点ID"
  (let ((cache (gethash node-id org-supertag-node--reference-cache)))
    (when cache
      (let ((timestamp (plist-get cache :timestamp))
            (now (float-time)))
        (if (< (- now timestamp) org-supertag-node-cache-ttl)
            ;; 缓存有效
            cache
          ;; 缓存过期，移除
          (remhash node-id org-supertag-node--reference-cache)
          nil)))))

(defun org-supertag-node--cache-put (node-id refs-to refs-from ref-count)
  "更新节点引用关系的缓存.
NODE-ID 是节点ID
REFS-TO 是引用的节点ID列表
REFS-FROM 是被引用的节点ID列表
REF-COUNT 是引用计数"
  (puthash node-id
           (list :refs-to refs-to
                 :refs-from refs-from
                 :ref-count ref-count
                 :timestamp (float-time))
           org-supertag-node--reference-cache))

(defun org-supertag-node--cache-invalidate (node-id)
  "使节点的引用缓存失效.
NODE-ID 是节点ID"
  (remhash node-id org-supertag-node--reference-cache))

(defun org-supertag-node--cache-clear ()
  "清空引用缓存."
  (clrhash org-supertag-node--reference-cache))

;;; 引用操作改进

(defun org-supertag-node-get-references (node &optional reverse)
  "获取节点的引用关系.
NODE 是节点对象
当 REVERSE 非空时，获取反向引用"
  (unless (org-supertag-node-p node)
    (error "Node must be an org-supertag-node object"))
  
  (let* ((node-id (org-supertag-node-id node))
         (cache (org-supertag-node--cache-get node-id)))
    (if cache
        ;; 使用缓存
        (if reverse
            (plist-get cache :refs-from)
          (plist-get cache :refs-to))
      ;; 缓存未命中，重新加载
      (let ((refs-to (org-supertag-node-refs-to node))
            (refs-from (org-supertag-node-refs-from node))
            (ref-count (org-supertag-node-ref-count node)))
        ;; 更新缓存
        (org-supertag-node--cache-put node-id refs-to refs-from ref-count)
        (if reverse refs-from refs-to)))))

(defun org-supertag-node-create-reference (source target)
  "创建节点引用关系.
SOURCE 是引用源节点
TARGET 是被引用节点"
  (unless (and (org-supertag-node-p source)
               (org-supertag-node-p target))
    (error "Source and target must be org-supertag-node objects"))
  
  ;; 检查是否已存在引用
  (unless (member (org-supertag-node-id target)
                 (org-supertag-node-refs-to source))
    ;; 更新源节点的引用
    (setf (org-supertag-node-refs-to source)
          (cons (org-supertag-node-id target)
                (org-supertag-node-refs-to source)))
    ;; 更新目标节点的被引用
    (setf (org-supertag-node-refs-from target)
          (cons (org-supertag-node-id source)
                (org-supertag-node-refs-from target)))
    ;; 更新引用计数
    (setf (org-supertag-node-ref-count target)
          (1+ (org-supertag-node-ref-count target)))
    ;; 使缓存失效
    (org-supertag-node--cache-invalidate (org-supertag-node-id source))
    (org-supertag-node--cache-invalidate (org-supertag-node-id target))))

(defun org-supertag-node-remove-reference (source target)
  "移除节点引用关系.
SOURCE 是引用源节点
TARGET 是被引用节点"
  (unless (and (org-supertag-node-p source)
               (org-supertag-node-p target))
    (error "Source and target must be org-supertag-node objects"))
  
  ;; 检查是否存在引用
  (when (member (org-supertag-node-id target)
                (org-supertag-node-refs-to source))
    ;; 更新源节点的引用
    (setf (org-supertag-node-refs-to source)
          (delete (org-supertag-node-id target)
                 (org-supertag-node-refs-to source)))
    ;; 更新目标节点的被引用
    (setf (org-supertag-node-refs-from target)
          (delete (org-supertag-node-id source)
                 (org-supertag-node-refs-from target)))
    ;; 更新引用计数
    (setf (org-supertag-node-ref-count target)
          (1- (org-supertag-node-ref-count target)))
    ;; 使缓存失效
    (org-supertag-node--cache-invalidate (org-supertag-node-id source))
    (org-supertag-node--cache-invalidate (org-supertag-node-id target))))

;; 修改同步函数以使用缓存
(defun org-supertag-node-sync-references (node)
  "同步节点的引用关系.
NODE 是节点对象"
  (unless (org-supertag-node-p node)
    (error "Node must be an org-supertag-node object"))
  
  (let ((node-id (org-supertag-node-id node)))
    ;; 使当前节点的缓存失效
    (when (fboundp 'org-supertag-node--cache-invalidate)
      (org-supertag-node--cache-invalidate node-id))
    
    ;; 同步引用到的节点
    (dolist (ref-id (org-supertag-node-refs-to node))
      (when-let ((ref-node (org-supertag-node--create-from-id ref-id)))
        ;; 使引用节点的缓存失效
        (when (fboundp 'org-supertag-node--cache-invalidate)
          (org-supertag-node--cache-invalidate ref-id))
        ;; 确保反向引用存在
        (unless (member node-id (org-supertag-node-refs-from ref-node))
          (setf (org-supertag-node-refs-from ref-node)
                (cons node-id (org-supertag-node-refs-from ref-node)))
          ;; 更新引用计数
          (setf (org-supertag-node-ref-count ref-node)
                (1+ (org-supertag-node-ref-count ref-node)))
          ;; 序列化更新
          (org-supertag-node-serialize-references ref-node))))
    
    ;; 同步被引用的节点
    (dolist (ref-id (org-supertag-node-refs-from node))
      (when-let ((ref-node (org-supertag-node--create-from-id ref-id)))
        ;; 使引用节点的缓存失效
        (when (fboundp 'org-supertag-node--cache-invalidate)
          (org-supertag-node--cache-invalidate ref-id))
        ;; 确保正向引用存在
        (unless (member node-id (org-supertag-node-refs-to ref-node))
          (setf (org-supertag-node-refs-to ref-node)
                (cons node-id (org-supertag-node-refs-to ref-node)))
          ;; 序列化更新
          (org-supertag-node-serialize-references ref-node))))))

;; 在文件保存时清空缓存（如果缓存系统可用）
(add-hook 'after-save-hook
          (lambda ()
            (when (and (eq major-mode 'org-mode)
                      (fboundp 'org-supertag-node--cache-clear))
              (org-supertag-node--cache-clear))))


;;; 引用同步
(defun org-supertag-node-sync-references (node)
  "同步节点的引用关系.
NODE 是节点对象"
  (unless (org-supertag-node-p node)
    (error "Node must be an org-supertag-node object"))
  
  ;; 同步引用到的节点
  (dolist (ref-id (org-supertag-node-refs-to node))
    (when-let ((ref-node (org-supertag-node--create-from-id ref-id)))
      ;; 确保反向引用存在
      (unless (member (org-supertag-node-id node)
                     (org-supertag-node-refs-from ref-node))
        (setf (org-supertag-node-refs-from ref-node)
              (cons (org-supertag-node-id node)
                    (org-supertag-node-refs-from ref-node)))
        ;; 更新引用计数
        (setf (org-supertag-node-ref-count ref-node)
              (1+ (org-supertag-node-ref-count ref-node)))
        ;; 序列化更新
        (org-supertag-node-serialize-references ref-node))))
  
  ;; 同步被引用的节点
  (dolist (ref-id (org-supertag-node-refs-from node))
    (when-let ((ref-node (org-supertag-node--create-from-id ref-id)))
      ;; 确保正向引用存在
      (unless (member (org-supertag-node-id node)
                     (org-supertag-node-refs-to ref-node))
        (setf (org-supertag-node-refs-to ref-node)
              (cons (org-supertag-node-id node)
                    (org-supertag-node-refs-to ref-node)))
        ;; 序列化更新
        (org-supertag-node-serialize-references ref-node)))))

;; 引用显示样式
;; 定制引用显示样式
(defface org-supertag-reference-count
  '((t (:inherit org-priority :height 0.9)))
  "引用计数的显示样式.")

(defface org-supertag-reference-section
  '((t (:inherit org-drawer :height 1.1 :weight bold)))
  "引用区域标题的显示样式.")

(defun org-supertag-node-format-reference (node-id)
  "格式化节点引用显示.
NODE-ID 是节点ID"
  (when-let ((node (org-supertag-node--create-from-id node-id)))
    (let* ((title (org-supertag-node-title node))
           (tags (org-supertag-node-tags node))
           (ref-count (org-supertag-node-ref-count node))
           (tag-str (if tags
                       (format " %s"
                               (mapconcat (lambda (tag)
                                          (propertize tag
                                                    'face 'org-tag))
                                        tags " "))
                     ""))
           (ref-str (if (> ref-count 0)
                       (format " [%d refs]"
                               (propertize (number-to-string ref-count)
                                         'face 'org-priority))
                     "")))
      (format "- [[id:%s][%s]]%s%s"
              node-id
              (propertize title 'face 'org-link)
              tag-str
              ref-str))))

(defun org-supertag-node--update-reference-display-enhanced (node)
  "增强的引用显示更新函数.
NODE 是节点对象"
  (let ((refs-to (org-supertag-node-get-references node))
        (refs-from (org-supertag-node-get-references node t)))
    (when (or refs-to refs-from)
      (org-with-wide-buffer
       (org-back-to-heading t)
       (let ((end (save-excursion
                   (outline-next-heading)
                   (point))))
         ;; 删除现有的引用区域
         (save-excursion
           (while (re-search-forward "^[ \t]*:REFERENCES:[ \t]*\n\\(?:.*\n\\)*?[ \t]*:END:[ \t]*\n?" end t)
             (replace-match "")))
         ;; 创建新的引用区域
         (save-excursion
           (end-of-line)
           (insert "\n:REFERENCES:\n")
           ;; 引用到的节点
           (when refs-to
             (insert (propertize "引用到：\n" 'face 'org-supertag-reference-section))
             (dolist (ref-id refs-to)
               (insert (org-supertag-node-format-reference ref-id) "\n")))
           ;; 被引用的节点
           (when refs-from
             (when refs-to (insert "\n"))
             (insert (propertize "被引用：\n" 'face 'org-supertag-reference-section))
             (dolist (ref-id refs-from)
               (insert (org-supertag-node-format-reference ref-id) "\n")))
           (insert ":END:\n")))))))


;; 修改现有的更新显示函数以使用增强版本
(defun org-supertag-node-update-reference-display (node)
  "更新节点的引用显示.
NODE 是节点对象"
  (unless (org-supertag-node-p node)
    (error "Node must be an org-supertag-node object"))
  
  ;; 调用原始的基本显示更新
  (let ((refs-to (org-supertag-node-refs-to node)))
    (when refs-to
      (org-with-wide-buffer
       (org-back-to-heading t)
       (let ((end (save-excursion
                   (outline-next-heading)
                   (point))))
         (save-excursion
           (while (re-search-forward "^[ \t]*:REFERENCES:[ \t]*\n\\(?:.*\n\\)*?[ \t]*:END:[ \t]*\n?" end t)
             (replace-match "")))
         (save-excursion
           (end-of-line)
           (insert "\n:REFERENCES:\n")
           (dolist (ref-id refs-to)
             (when-let ((ref-node (org-supertag-node--create-from-id ref-id)))
               (insert (format "- [[id:%s][%s]]\n"
                             (org-supertag-node-id ref-node)
                             (org-supertag-node-title ref-node)))))
           (insert ":END:\n"))))))
  
  ;; 调用增强版本的显示更新
  (org-supertag-node--update-reference-display-enhanced node))

(defun org-supertag-node-sync-all-references ()
  "同步所有节点的引用关系."
  (interactive)
  (org-map-entries
   (lambda ()
     (when-let* ((id (org-id-get))
                 (node (org-supertag-node--create-from-id id)))
       (org-supertag-node-sync-references node)
       (org-supertag-node-update-reference-display node)))
   nil nil))

;; 添加到变更监听
(add-hook 'org-supertag-node-after-change-functions
          #'org-supertag-node-sync-references)
(add-hook 'org-supertag-node-after-change-functions
          #'org-supertag-node-update-reference-display)

;;; 节点引用功能

(defun org-supertag-node-create-reference (source target)
  "创建节点引用关系.
SOURCE 是引用源节点
TARGET 是被引用节点"
  (unless (and (org-supertag-node-p source)
               (org-supertag-node-p target))
    (error "Source and target must be org-supertag-node objects"))
  
  ;; 检查是否已存在引用
  (unless (member (org-supertag-node-id target)
                 (org-supertag-node-refs-to source))
    ;; 更新源节点的引用
    (setf (org-supertag-node-refs-to source)
          (cons (org-supertag-node-id target)
                (org-supertag-node-refs-to source)))
    ;; 更新目标节点的被引用
    (setf (org-supertag-node-refs-from target)
          (cons (org-supertag-node-id source)
                (org-supertag-node-refs-from target)))
    ;; 更新引用计数
    (setf (org-supertag-node-ref-count target)
          (1+ (org-supertag-node-ref-count target)))))

(defun org-supertag-node-remove-reference (source target)
  "移除节点引用关系.
SOURCE 是引用源节点
TARGET 是被引用节点"
  (unless (and (org-supertag-node-p source)
               (org-supertag-node-p target))
    (error "Source and target must be org-supertag-node objects"))
  
  ;; 检查是否存在引用
  (when (member (org-supertag-node-id target)
                (org-supertag-node-refs-to source))
    ;; 更新源节点的引用
    (setf (org-supertag-node-refs-to source)
          (delete (org-supertag-node-id target)
                 (org-supertag-node-refs-to source)))
    ;; 更新目标节点的被引用
    (setf (org-supertag-node-refs-from target)
          (delete (org-supertag-node-id source)
                 (org-supertag-node-refs-from target)))
    ;; 更新引用计数
    (setf (org-supertag-node-ref-count target)
          (1- (org-supertag-node-ref-count target)))))

(defun org-supertag-node-get-references (node &optional reverse)
  "获取节点的引用关系.
NODE 是节点对象
当 REVERSE 非空时，获取反向引用"
  (unless (org-supertag-node-p node)
    (error "Node must be an org-supertag-node object"))
  
  (if reverse
      (org-supertag-node-refs-from node)
    (org-supertag-node-refs-to node)))

(defun org-supertag-node-reference-at-point ()
  "在当前位置创建节点引用."
  (interactive)
  (when-let* ((source-id (org-id-get))
              (target-id (org-id-get-with-outline-path-completion))
              (source (org-supertag-node--create-from-id source-id))
              (target (org-supertag-node--create-from-id target-id)))
    (org-supertag-node-create-reference source target)))

(defun org-supertag-node--create-from-id (id)
  "从ID创建节点对象."
  (when-let* ((marker (org-id-find id t))
              (buffer (marker-buffer marker))
              (pos (marker-position marker)))
    (with-current-buffer buffer
      (save-excursion
        (goto-char pos)
        (org-supertag-node--create-at-point)))))

(defun org-supertag-node--create-at-point ()
  "在当前位置创建节点对象."
  (unless (org-at-heading-p)
    (error "Must be at heading"))
  
  (let* ((id (org-id-get-create))
         (heading (org-get-heading t t t t))
         (olp (org-get-outline-path t t))
         (file (buffer-file-name))
         (level (org-current-level))
         (todo (org-get-todo-state))
         (priority (org-get-priority (org-get-heading t t)))
         (scheduled (org-get-scheduled-time (point)))
         (tags (org-get-tags))
         (properties (org-entry-properties)))
    
    (org-supertag-node--create
     :id id
     :title heading
     :file-title (org-get-title)
     :file-path file
     :olp olp
     :pos (point)
     :level level
     :todo todo
     :priority priority
     :scheduled scheduled
     :tags tags
     :properties properties
     :refs-to nil
     :refs-from nil
     :ref-count 0)))