;;; org-supertag-node.el --- Node management for org-supertag -*- lexical-binding: t; -*-

;;; Commentary:
;; 提供节点的核心功能，包括：
;; - 节点结构定义
;; - 节点操作（创建、移动、复制、删除）
;; - 节点监控

;;; Code:

(require 'org)
(require 'org-element)
(require 'org-id)
(require 'org-supertag-base)  ; 使用基础模块
(require 'org-supertag-api)
(require 'org-supertag-parser)
(require 'org-supertag-sync)



(defun org-supertag-node-get (id)
  "获取节点.
ID 是节点唯一标识"
  (let ((node (org-supertag-db-get id)))
    (when (and node (eq (plist-get node :type) :node))
      node)))


(defun org-supertag-node-update-metadata (id props)
  "更新节点元数据.
ID 是节点唯一标识
PROPS 是要更新的属性"
  (when-let ((node (org-supertag-db-get id)))
    (when (eq (plist-get node :type) :node)
      ;; 创建新的节点属性，合并原有属性和新属性
      (let ((new-node (copy-sequence node)))
        ;; 更新属
        (while props
          (let ((key (pop props))
                (value (pop props)))
            (setq new-node (plist-put new-node key value))))
        ;; 保存更新后的节点
        (org-supertag-db-add id new-node)
        t))))

(defun org-supertag-node-at-point ()
  "获取当前位置的节点信息.
返回一个新的 org-supertag-node 对象，如果当前位置不是有效的节点则返回 nil"
  (when-let* ((element (org-element-at-point))
              (node-id (org-id-get-create)))
    (org-supertag-node--parse-element element node-id)))

;;; 节点操作处理
(defun org-supertag-node--handle-delete (node)
  "处理节点的删除操作.
NODE 是要删除的节点."
  (when-let ((node-id (org-supertag-node-id node)))
    ;; 1. 获取节点的引用关系
    (let ((refs-to (org-supertag-node-refs-to node))
          (refs-from (org-supertag-node-refs-from node)))
      
      ;; 2. 清理引用关系
      (dolist (ref refs-to)
        (org-supertag-remove-reference node-id ref))
      (dolist (ref refs-from)
        (org-supertag-remove-reference ref node-id))
      
      ;; 3. 清理标签关系
      (dolist (tag (org-supertag-node-tags node))
        (org-supertag-remove-tag node-id tag))
      
      ;; 4. 删除节点记录
      (org-supertag-delete-node node-id))))

(defun org-supertag-node--detect-operation ()
  "检测当前操作类型（移动、复制或删除）.
返回值:
- 'move 表示移动操作
- 'copy 表示复制操作
- 'delete 表示删除操作
- nil 表示无法确定"
  (let ((this-command-keys (this-command-keys-vector)))
    (cond
     ;; org-refile 移动
     ((eq this-command 'org-refile) 'move)
     ;; org-copy 复制
     ((eq this-command 'org-copy) 'copy)
     ;; org-cut 剪切（移动）
     ((eq this-command 'org-cut) 'move)
     ;; org-paste 粘贴（要根据之的操作判断）
     ((eq this-command 'org-paste)
      (if (eq last-command 'org-cut)
          'move
        'copy))
     ;; 删除操作
     ((memq this-command '(org-cut-subtree org-delete-backward-char org-delete-char)) 'delete)
     ;; 其他情况返回 nil
     (t nil))))

(defun org-supertag-node--handle-operation (node operation)
  "处理节点的移动、复制或删除操作.
NODE 是要处理的节点
OPERATION 是操作类型，可以是 'move、'copy 或 'delete"
  (let ((node-id (org-supertag-node-id node)))
    (pcase operation
      ('move
       ;; 移动操作：保持原有 ID
       (org-supertag-sync-node-at-point))  ; 使用同步模块的函数
      ('copy
       ;; 复制操作：生成新 ID
       (org-id-get-create)
       (org-supertag-sync-node-at-point))  ; 使用同步模块的函数
      ('delete
       ;; 删除操作：清理节点及其关系
       (org-supertag-node--handle-delete node))
      (_ (error "Unknown operation: %s" operation)))))

;;; 节点同步功能

(defvar org-supertag-node--before-change-data nil
  "存储变更前的节点数据.")

(defun org-supertag-node-sync-at-point ()
  "同步当前位置的节点."
  (save-excursion
    (org-back-to-heading t)
    (let* ((node-id (org-id-get-create))
           (element (org-element-at-point))
           (props (org-supertag--extract-node-props element)))
      (when (org-supertag-sync-entity node-id props)
        node-id))))

(defun org-supertag-node-sync-tags (node-id tags)
  "同步节点的标签.
NODE-ID 是节点 ID
TAGS 是标签列表"
  (let ((existing-tags (org-supertag-node-get-tags node-id))
        (new-tags (mapcar #'org-supertag-node--normalize-tag-name tags)))
    ;; 移除不再存在的标签
    (dolist (old-tag existing-tags)
      (unless (member old-tag new-tags)
        (org-supertag-sync-relation :node-tag node-id old-tag)))
    ;; 添加新标签
    (dolist (new-tag new-tags)
      (unless (member new-tag existing-tags)
        (org-supertag-sync-relation :node-tag node-id new-tag)))))

(defun org-supertag-node--normalize-tag-name (tag)
  "标准标签名称.
TAG 是原始标签名"
  (concat "#" (downcase (if (string-prefix-p "#" tag)
                           (substring tag 1)
                         tag))))



;;; 变更监听

(defun org-supertag-node--before-change (beg end)
  "变更前的处理函数.
BEG 和 END 是变更范围"
  (when (org-at-heading-p)
    (setq org-supertag-node--before-change-data
          `(:id ,(org-id-get)
            :tags ,(org-get-tags nil t)
            :properties ,(org-entry-properties)))))

(defun org-supertag-node--after-change ()
  "变更后的处理函数."
  (when (and org-supertag-node--before-change-data
             (org-at-heading-p))
    (let ((before-id (plist-get org-supertag-node--before-change-data :id))
          (current-id (org-id-get)))
      (when (and before-id (equal before-id current-id))
        (org-supertag-node-sync-at-point)))
    (setq org-supertag-node--before-change-data nil)))

;;; 自动同步模式

(define-minor-mode org-supertag-node-sync-mode
  "自动同步 org 节点变化到 supertag 系统."
  :lighter " SuperTag[Node]"
  :global nil
  (if org-supertag-node-sync-mode
      (progn
        (org-supertag-sync-add-before-change-function #'org-supertag-node--before-change)
        (org-supertag-sync-add-after-change-function #'org-supertag-node--after-change)
        (org-supertag-sync-setup-hooks))
    (org-supertag-sync-remove-hooks)))

;;; 用户命令

(defun org-supertag-node-create-at-point ()
  "在当前位置创建一个新的 supertag 节点."
  (interactive)
  (unless (org-at-heading-p)
    (user-error "光标必须在标题处"))
  (when (org-id-get)
    (user-error "该标题已经有一个节点"))
  (org-supertag-node-sync-at-point))

;;; 节点标签操作

(defun org-supertag-node--insert-tags (node-id)
  "为节点添加标签.
NODE-ID 是节点ID"
  (let* ((available-tags (mapcar #'car (org-supertag-find-object :tag)))
         (selected-tags (completing-read-multiple
                        "Tags: "
                        available-tags)))
    (dolist (tag selected-tags)
      (org-supertag-add-tag node-id tag))))

(defun org-supertag-node--set-field (node-id)
  "为节点设置字段值.
NODE-ID 是节点ID"
  (let* ((available-fields (mapcar #'car (org-supertag-find-object :field)))
         (field (completing-read
                "Field: "
                available-fields))
         (value (read-string "Value: ")))
    (org-supertag-set-field node-id field value)))

;;; 节点创建

(defun org-supertag-node-get-tags (node-id)
  "获取节点的标签列表.
NODE-ID 是节点ID"
  (org-supertag-get-node-tags node-id))

(defun org-supertag-node-update-at-point ()
  "更新当前位置的节点."
  (interactive)
  (unless (org-at-heading-p)
    (user-error "光标必须在标题处"))
  (unless (org-id-get)
    (user-error "该标题没有关联的节点"))
  (org-supertag-node-sync-at-point))

(defun org-supertag-node-get-props ()
  "获取当前节点的属性."
  (let* ((element (org-element-at-point))
         (level (org-element-property :level element))
         (title (org-element-property :raw-value element))
         (olp (org-get-outline-path)))
    (message "Debug - Extracting props for level %d node: %s" level title)
    (let ((props (list :type :node
                      :title title
                      :level level
                      :olp olp)))
      (message "Debug - Node properties before return: %S" props)
      props)))

(defun org-supertag-update-to-point ()
  "更新当前位置的节点."
  (interactive)
  (message "Debug - Starting update-to-point")
  (save-excursion
    (message "Debug - Moving to heading")
    (org-back-to-heading t)
    (message "Debug - Getting node properties")
    (let* ((node-props (org-supertag-node-get-props))
           (_ (message "Debug - Got node props: %S" node-props)
           (node-id (org-id-get-create))
           (_ (message "Debug - Got node ID: %s" node-id)))
      (org-supertag-update-entity node-id node-props)))))

(provide 'org-supertag-node)
;;; org-supertag-node.el ends here
