;;; org-supertag-field.el --- Field management for org-supertag -*- lexical-binding: t; -*-

;;----------------------------------------------------------------------
;; Field 类型注册表
;;----------------------------------------------------------------------

;; 字段类型注册表
(defvar org-supertag-field-types
  (make-hash-table :test 'equal)
  "字段类型注册表。
每个类型是一个 plist，包含:
:validator  - 验证函数
:formatter  - 格式化函数
:description - 类型描述")

;; 字段注册表
(defvar org-supertag-fields
  (make-hash-table :test 'equal)
  "字段注册表。
每个字段是一个 plist，包含:
:name      - 字段名称
:type      - 字段类型
:required  - 是否必填
:inherit   - 是否继承
:options   - 字段选项")

(defun org-supertag-register-field-type (type spec)
  "注册字段类型。
TYPE 是类型名称，
SPEC 是包含 :validator 和 :formatter 的 plist。"
  (puthash type spec org-supertag-field-types)
  spec)

(defun org-supertag-get-field-type (type)
  "获取字段类型定义。"
  (gethash type org-supertag-field-types))

(defun org-supertag-register-field (name spec)
  "注册字段。
NAME 是字段名称，
SPEC 是字段规格说明。"
  (puthash name spec org-supertag-fields)
  spec)

(defun org-supertag-get-field (name)
  "获取字段定义。"
  (gethash name org-supertag-fields))

;;----------------------------------------------------------------------
;; 预设字段类型
;;----------------------------------------------------------------------

;; 定义字段类别
(defvar org-supertag-field-categories
  '(("基础类型" . ("string"))
    ("基本字段" . ("place" "people" "date" "url" "email" "project"))
    ("Org特殊属性" . nil)  ; 将在初始化时填充
    ("其他字段" . nil))    ; 将在初始化时填充
  "字段类型的分类定义。")

(defun org-supertag-init-field-types ()
  "初始化预设的字段类型。"
  (clrhash org-supertag-field-types)

  ;; 最基础的字符串类型
  (org-supertag-register-field-type
   "string"
   '(:validator stringp
     :formatter string-trim
     :description "基础字符串类型，接受任何非空文本"))

  ;; 基本字段类型
  (org-supertag-register-field-type
   "place"
   '(:validator org-supertag-validate-place
     :formatter org-supertag-format-place
     :description "地点字段"))

  (org-supertag-register-field-type
   "people"
   '(:validator org-supertag-validate-people
     :formatter org-supertag-format-people
     :description "人员字段"))

  (org-supertag-register-field-type
   "date"
   '(:validator org-supertag-validate-date
     :formatter org-supertag-format-date
     :description "日期字段"))

  (org-supertag-register-field-type
   "url"
   '(:validator org-supertag-validate-url
     :formatter org-supertag-format-url
     :description "URL地址"))

  (org-supertag-register-field-type
   "email"
   '(:validator org-supertag-validate-email
     :formatter org-supertag-format-email
     :description "电子邮箱"))

  (org-supertag-register-field-type
   "project"
   '(:validator org-supertag-validate-project
     :formatter org-supertag-format-project
     :description "项目字段"))

  ;; 注册 Org 特殊属性
  (dolist (prop org-special-properties)
    (org-supertag-register-field-type
     (downcase prop)
     `(:validator ,(lambda (value) (stringp value))
       :formatter ,(lambda (value) (org-entry-get nil prop))
       :description ,(format "Org特殊属性: %s" prop))))

  ;; 更新类别定义中的特殊属性列表
  (setf (alist-get "Org特殊属性" org-supertag-field-categories nil nil #'equal)
        (mapcar #'downcase org-special-properties))
  
  ;; 更新其他字段类别
  (setf (alist-get "其他字段" org-supertag-field-categories nil nil #'equal)
        (seq-difference
         (hash-table-keys org-supertag-field-types)
         (apply #'append (mapcar #'cdr (butlast org-supertag-field-categories))))))


;;----------------------------------------------------------------------
;; 字段验证和格式化
;;----------------------------------------------------------------------

(defun org-supertag-validate-field-value (field-name value)
  "验证字段值。
FIELD-NAME 是字段名称，
VALUE 是要验证的值。"
  (when-let* ((field (org-supertag-get-field field-name))
              (type (plist-get field :type))
              (type-spec (org-supertag-get-field-type type))
              (validator (plist-get type-spec :validator)))
    (or (null value)
        (not (plist-get field :required))
        (funcall validator value))))

(defun org-supertag-format-field-value (field-name value)
  "格式化字段值。
FIELD-NAME 是字段名称，
VALUE 是要格式化的值。"
  (when-let* ((field (org-supertag-get-field field-name))
              (type (plist-get field :type))
              (type-spec (org-supertag-get-field-type type))
              (formatter (plist-get type-spec :formatter)))
    (if value
        (funcall formatter value)
      "")))

;; 基本验证器
(defun org-supertag-validate-date (value)
  "验证日期值。"
  (condition-case nil
      (org-parse-time-string value)
    (error nil)))

(defun org-supertag-validate-email (value)
  "验证邮箱地址。"
  (and (stringp value)
       (string-match-p "^[^@]+@[^@]+\\.[^@]+$" value)))

(defun org-supertag-validate-url (value)
  "验证URL地址。"
  (and (stringp value)
       (string-match-p "^https?://" value)))

(defun org-supertag-validate-place (value)
  "验证地点。"
  (stringp value))

(defun org-supertag-validate-people (value)
  "验证人员。"
  (stringp value))

(defun org-supertag-validate-project (value)
  "验证项目。"
  (stringp value))

;; 基本格式化器
(defun org-supertag-format-date (value)
  "格式化日期。"
  (when (stringp value)
    (string-trim value)))

(defun org-supertag-format-email (value)
  "格式化邮箱地址。"
  (string-trim value))

(defun org-supertag-format-url (value)
  "格式化URL地址。"
  (string-trim value))

(defun org-supertag-format-place (value)
  "格式化地点。"
  (string-trim value))

(defun org-supertag-format-people (value)
  "格式化人员。"
  (string-trim value))

(defun org-supertag-format-project (value)
  "格式化项目。"
  (string-trim value))

;;----------------------------------------------------------------------
;; 字段值存储和加载
;;----------------------------------------------------------------------

(defvar org-supertag-field-values
  (make-hash-table :test 'equal)
  "存储字段值的哈希表。
键：节点ID
值：字段值哈希表（键：字段名，值：字段值）")

(defun org-supertag-hash-table-to-alist (table)
  "将哈希表转换为关联列表。"
  (let (alist)
    (maphash (lambda (k v) (push (cons k v) alist)) table)
    (nreverse alist)))

(defun org-supertag-save-field-values ()
  "保存所有字段值到文件。"
  (with-temp-buffer
    (let ((print-level nil)
          (print-length nil))
      (prin1 (org-supertag-hash-table-to-alist org-supertag-field-values)
             (current-buffer))
      (write-region (point-min)
                   (point-max)
                   (expand-file-name "field-values.el"
                                   (file-name-directory org-supertag-template-file))
                   nil 'silent))))

(defun org-supertag-load-field-values ()
  "从文件加载字段值。"
  (let ((file (expand-file-name "field-values.el"
                               (file-name-directory org-supertag-template-file))))
    (when (file-exists-p file)
      (with-temp-buffer
        (insert-file-contents file)
        (goto-char (point-min))
        (condition-case nil
            (let ((values (read (current-buffer))))
              (clrhash org-supertag-field-values)
              (dolist (entry values)
                (puthash (car entry) (cdr entry) org-supertag-field-values)))
          (error (message "加载字段值时出错")))))))

(defun org-supertag-load-field-templates ()
  "从模板文件加载所有字段模板。"
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (let ((templates (make-hash-table :test 'equal)))
       (while (re-search-forward "^\\*\\* #\\(.+\\)$" nil t)
         (let* ((tag-name (match-string 1))
                (fields-str (org-entry-get nil "FIELDS")))
           (when fields-str
             (condition-case nil
                 (puthash tag-name (read fields-str) templates)
               (error (message "解析模板 %s 时出错" tag-name))))))
       templates))))

(defun org-supertag-get-field-value (node-id field-name)
  "获取字段值。
NODE-ID 是节点ID，
FIELD-NAME 是字段名称。"
  (when-let* ((fields (gethash node-id org-supertag-field-values)))
    (gethash field-name fields)))

(defun org-supertag-set-field-value (node-id field-name value)
  "设置字段值。
NODE-ID 是节点ID，
FIELD-NAME 是字段名称，
VALUE 是字段值。"
  (let ((fields (or (gethash node-id org-supertag-field-values)
                    (puthash node-id (make-hash-table :test 'equal)
                            org-supertag-field-values))))
    (puthash field-name value fields)))

;;----------------------------------------------------------------------
;; 用户界面
;;----------------------------------------------------------------------

(defun org-supertag-get-categorized-fields ()
  "获取已分类的字段列表。"
  (let ((available-types (hash-table-keys org-supertag-field-types))
        (current-tags (org-get-tags)))
    (mapcan (lambda (cat)
             (let* ((cat-name (car cat))
                    (cat-types (cdr cat))
                    (valid-types (seq-intersection
                                cat-types
                                (seq-difference available-types current-tags))))
               (when valid-types
                 (cons (propertize cat-name 'face 'org-level-1)
                       valid-types))))
           org-supertag-field-categories)))

(defun org-supertag-add-field-to-entry ()
  "为当前条目添加一个字段标签。"
  (interactive)
  (let* ((choices (org-supertag-get-categorized-fields))
         (type (completing-read "选择字段类型: " choices nil t)))
    (unless (get-text-property 0 'face type) ; 忽略分类标题
      (let* ((field-name (read-string "字段名称: "))
             (required (y-or-n-p "是否必填？"))
             (inherit (y-or-n-p "是否继承？"))
             (field-spec (list :name field-name
                             :type type
                             :required required
                             :inherit inherit)))
        ;; 注册字段
        (org-supertag-register-field field-name field-spec)
        ;; 添加标签
        (org-toggle-tag type 'on)
        ;; 可选：立即编辑
        (when (y-or-n-p "是否立即编辑该字段？")
          (org-supertag-edit-field type))))))



;;----------------------------------------------------------------------
;; 用户界面命令
;;----------------------------------------------------------------------

(defun org-supertag-add-field-to-entry ()
  "为当前条目添加一个字段标签。"
  (interactive)
  (let* ((available-types (hash-table-keys org-supertag-field-types))
         (current-tags (org-get-tags))
         (unused-types (seq-difference available-types current-tags))
         ;; 使用预定义的类别
         (choices
          (mapcan (lambda (cat)
                   (let ((cat-name (car cat))
                         (cat-types (cdr cat)))
                     (cons (propertize cat-name 'face 'org-level-1)
                           (seq-intersection cat-types unused-types))))
                 org-supertag-field-categories))
         (type (completing-read "选择字段类型: " choices nil t)))
    (unless (get-text-property 0 'face type) ; 忽略分类标题
      (org-toggle-tag type 'on)
      (when (y-or-n-p "是否立即编辑该字段？")
        (org-supertag-edit-field type)))))

;;----------------------------------------------------------------------
;; 初始化和清理
;;----------------------------------------------------------------------

(defvar org-supertag-auto-save-timer nil
  "自动保存定时器。")

(defcustom org-supertag-auto-save-interval 300
  "自动保存间隔（秒）。"
  :type 'integer
  :group 'org-supertag)

(defun org-supertag-setup-auto-save ()
  "设置自动保存。"
  (when org-supertag-auto-save-timer
    (cancel-timer org-supertag-auto-save-timer))
  (setq org-supertag-auto-save-timer
        (run-with-timer org-supertag-auto-save-interval
                       org-supertag-auto-save-interval
                       #'org-supertag-save-all)))

(defun org-supertag-save-all ()
  "保存所有字段相关的数据。"
  (org-supertag-save-field-values)
  (org-supertag-save-field-templates))

(defun org-supertag-field-init ()
  "初始化字段系统。"
  ;; 初始化基础数据结构
  (clrhash org-supertag-field-types)
  (clrhash org-supertag-fields)
  (clrhash org-supertag-field-index)
  
  ;; 加载预设字段类型
  (org-supertag-init-field-types)
  
  ;; 确保模板文件存在
  (org-supertag-ensure-template-file)
  
  ;; 加载已保存的数据
  (org-supertag-load-field-templates)
  (org-supertag-load-field-values)
  
  ;; 构建索引
  (org-supertag-field-build-index)
  
  ;; 设置自动保存
  (org-supertag-setup-auto-save))

(defun org-supertag-field-cleanup ()
  "清理字段系统。"
  ;; 取消定时器
  (when org-supertag-auto-save-timer
    (cancel-timer org-supertag-auto-save-timer))
  
  ;; 保存所有数据
  (org-supertag-save-all)
  
  ;; 清理数据结构
  (clrhash org-supertag-field-types)
  (clrhash org-supertag-fields)
  (clrhash org-supertag-field-index))

;; 注册钩子
(add-hook 'kill-emacs-hook #'org-supertag-field-cleanup)

;; Property 同步
(defun org-supertag-sync-field-to-property (node-id)
  "Sync field values to org properties for NODE-ID."
  (when-let* ((fields (gethash node-id org-supertag-field-values))
              (node (org-supertag-get-node node-id)))
    (maphash (lambda (field-name value)
               (org-entry-put node field-name (format "%s" value)))
             fields)))

(defun org-supertag-sync-property-to-field (node-id)
  "Sync org properties to field values for NODE-ID."
  (when-let* ((node (org-supertag-get-node node-id))
              (props (org-entry-properties node)))
    (dolist (prop props)
      (org-supertag-set-field-value node-id 
                                   (car prop) 
                                   (cdr prop)))))

;; SuperTag 删除时的清理
(defun org-supertag-cleanup-field (supertag-name)
  "Cleanup field when SUPERTAG-NAME is deleted."
  (when-let ((field (gethash supertag-name org-supertag-field-registry)))
    ;; 清理字段定义
    (org-supertag-unregister-field supertag-name)
    ;; 清理相关节点的字段值
    (maphash (lambda (node-id fields)
               (when (org-supertag-node-has-tag-p node-id supertag-name)
                 (remhash (plist-get field :name) fields)))
             org-supertag-field-values)))

;; 用户接口函数
(defun org-supertag-add-field-to-tag (tag-name)
  "Interactively add a field to TAG-NAME."
  (interactive "sTag name: ")
  (let* ((field-name (read-string "Field name: "))
         (field-type (completing-read "Field type: "
                                    (mapcar #'car org-supertag-field-types)))
         (fields (or (org-supertag-get-tag-fields tag-name)
                    (make-hash-table :test 'equal))))
    (puthash field-name
             `(:name ,field-name :type ,field-type)
             fields)
    (org-supertag-set-tag-fields tag-name fields)))

;; Field 定义的持久化 (使用 org-mode 的原生机制)
(defun org-supertag-field-save-definition (field)
  "Save FIELD definition to org file."
  (let* ((name (plist-get field :name))
         (type (plist-get field :type))
         (supertag (plist-get field :supertag)))
    (with-current-buffer (org-supertag-get-config-buffer)
      (org-with-point-at (org-supertag-find-or-create-field-section)
        (org-insert-subheading nil)
        (insert name)
        (org-set-property "TYPE" (symbol-name type))
        (org-set-property "SUPERTAG" supertag)))))

;; Field 值的持久化 (直接使用 org properties)
(defun org-supertag-field-set-value (node field-name value)
  "Set FIELD-NAME to VALUE for NODE."
  (org-with-point-at node
    (org-set-property field-name value)))

;; 只保存必要的索引用于加速查询
(defvar org-supertag-field-index (make-hash-table :test 'equal)
  "Index for quick field lookups.
Key: field-name
Value: (supertag . nodes) where nodes is a list of node markers")

(defun org-supertag-field-build-index ()
  "Rebuild the field index from org files."
  (clrhash org-supertag-field-index)
  (org-map-entries
   (lambda ()
     (let* ((node (point-marker))
            (props (org-entry-properties node)))
       (dolist (prop props)
         (let ((field-name (car prop)))
           (when (org-supertag-field-p field-name)
             (push node (cdr (alist-get field-name org-supertag-field-index))))))))))

;; 文件变更时自动更新索引
(defun org-supertag-field-after-save-hook ()
  "Update field index after saving org files."
  (when (eq major-mode 'org-mode)
    (org-supertag-field-build-index)))

(add-hook 'after-save-hook #'org-supertag-field-after-save-hook)

;; 从 org 文件加载 Field 定义
(defun org-supertag-load-field-definitions ()
  "Load field definitions from org file into registry."
  (org-with-point-at (org-supertag-find-supertags-section)
    (org-map-entries
     (lambda ()
       (when-let* ((tag-name (org-get-heading t t t t))
                  (fields-str (org-entry-get nil "FIELDS"))
                  (fields (read fields-str)))
         (org-supertag-register-field tag-name fields))))))

;;----------------------------------------------------------------------
;; 字段模板系统
;;----------------------------------------------------------------------

(defcustom org-supertag-template-file
  (expand-file-name "org-supertag-templates.org"
                   user-emacs-directory)
  "存储字段模板的文件。")

(defun org-supertag-ensure-template-file ()
  "确保模板文件存在且可访问。"
  (unless (file-exists-p org-supertag-template-file)
    (with-temp-file org-supertag-template-file
      (insert "#+TITLE: Org SuperTag Templates\n\n"
              "* Field Types\n\n"
              "* Field Templates\n"))))

(defun org-supertag-save-field-template (tag-name template)
  "保存字段模板。
TAG-NAME 是模板标签名，
TEMPLATE 是字段模板定义。"
  (org-supertag-ensure-template-file)  ; 确保文件存在
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (unless (re-search-forward "^\\* Field Templates$" nil t)
       (goto-char (point-max))
       (insert "\n* Field Templates\n"))
     (let ((template-section (point)))
       ;; 删除已存在的模板
       (when (re-search-forward (format "^\\*\\* #%s$" tag-name) nil t)
         (org-back-to-heading t)
         (let ((element (org-element-at-point)))
           (delete-region (org-element-property :begin element)
                         (org-element-property :end element))))
       ;; 插入新模板
       (goto-char template-section)
       (insert (format "\n** #%s\n" tag-name))
       (org-set-property "FIELDS" (format "%S" template))
       (save-buffer)))))

(defun org-supertag-load-field-template (tag-name)
  "加载字段模板。
TAG-NAME 是模板标签名。"
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (when (re-search-forward (format "^\\*\\* #%s$" tag-name) nil t)
       (let ((fields (org-entry-get (point) "FIELDS")))
         (when fields
           (read fields)))))))

(defun org-supertag-edit-field-template (tag-name)
  "交互式编辑字段模板。
TAG-NAME 是模板标签名。"
  (interactive "sTag name (without #): ")
  (let* ((template (or (org-supertag-load-field-template tag-name)
                      '()))  ; 空模板
         (fields nil))
    ;; 收集字段定义
    (while (y-or-n-p "添加字段？")
      (let* ((field-name (read-string "字段名称: "))
             (field-type (completing-read "字段类型: "
                                        (hash-table-keys org-supertag-field-types)))
             (required (y-or-n-p "是否必填？"))
             (inherit (y-or-n-p "是否继承？"))
             (field-spec (list :name field-name
                             :type field-type
                             :required required
                             :inherit inherit)))
        (push field-spec fields)))
    
    ;; 保存模板
    (when fields
      (org-supertag-save-field-template tag-name (nreverse fields))
      (message "字段模板 #%s 已保存。" tag-name))))

(defun org-supertag-list-field-templates ()
  "列出所有可用的字段模板。"
  (interactive)
  (with-current-buffer (find-file-noselect org-supertag-template-file)
    (org-with-wide-buffer
     (goto-char (point-min))
     (let ((templates nil))
       (while (re-search-forward "^\\*\\* #\\(.+\\)$" nil t)
         (push (match-string 1) templates))
       (if templates
           (message "可用的模板: %s"
                    (mapconcat #'identity (nreverse templates) ", "))
         (message "还没有定义任何模板。"))))))

(defun org-supertag-view-field-template (tag-name)
  "查看字段模。
TAG-NAME 是模板标签名。"
  (interactive
   (list (completing-read "选择模板: "
                         (with-current-buffer (find-file-noselect org-supertag-template-file)
                           (org-with-wide-buffer
                            (goto-char (point-min))
                            (let ((tags nil))
                              (while (re-search-forward "^\\*\\* #\\(.+\\)$" nil t)
                                (push (match-string 1) tags))
                              (nreverse tags)))))))
  (when-let ((template (org-supertag-load-field-template tag-name)))
    (with-current-buffer (get-buffer-create "*SuperTag Template*")
      (erase-buffer)
      (insert (format "字段模板 #%s:\n\n" tag-name))
      (dolist (field template)
        (let ((name (plist-get field :name))
              (type (plist-get field :type))
              (required (plist-get field :required))
              (inherit (plist-get field :inherit))
              (options (plist-get field :options)))
          (insert (format "- %s (%s%s%s%s)\n"
                         name
                         type
                         (if required ", 必填" "")
                         (if inherit ", 继承" "")
                         (if options (format ", 选项: %s" options) "")))))
      (special-mode)
      (display-buffer (current-buffer)))))

;;----------------------------------------------------------------------
;; Field 管理命令
;;----------------------------------------------------------------------

(defun org-supertag-edit-field (&optional field-type)
  "编辑当前节点的字段值。
如果提供了 FIELD-TYPE，直接编辑该字段。"
  (interactive)
  (let* ((tags (org-get-tags))
         (field-types (seq-filter (lambda (tag)
                                  (gethash tag org-supertag-field-types))
                                tags))
         (type (or field-type
                  (completing-read "选择字段: " field-types nil t))))
    (if (null type)
        (message "当前节点没有可编辑的字段")
      (let* ((field (org-supertag-get-field type))
             (type-spec (org-supertag-get-field-type type))
             (current-value (org-entry-get nil type))
             (new-value (read-string (format "%s: " type)
                                   (or current-value ""))))
        (if (org-supertag-validate-field-value type new-value)
            (let ((formatted-value (org-supertag-format-field-value type new-value)))
              (org-entry-put nil type formatted-value)
              (message "已更新 %s: %s" type formatted-value))
          (message "无效的值: %s" new-value))))))

(defun org-supertag-edit-all-fields ()
  "编辑当前节点的所有字段值。"
  (interactive)
  (let* ((tags (org-get-tags))
         (field-types (seq-filter (lambda (tag)
                                  (gethash tag org-supertag-field-types))
                                tags)))
    (if (null field-types)
        (message "当前节点没有可编辑的字段")
      (dolist (field-type field-types)
        (let* ((field (org-supertag-get-field field-type))
               (current-value (org-entry-get nil field-type))
               (new-value (read-string (format "%s: " field-type)
                                     (or current-value ""))))
          (when (org-supertag-validate-field-value field-type new-value)
            (let ((formatted-value (org-supertag-format-field-value field-type new-value)))
              (org-entry-put nil field-type formatted-value)
              (message "已更新 %s: %s" field-type formatted-value))))))))

(defun org-supertag-remove-field-from-entry ()
  "从当前条目移除一个字段标签。"
  (interactive)
  (let* ((current-tags (org-get-tags))
         (field-types (seq-filter (lambda (tag)
                                  (gethash tag org-supertag-field-types))
                                current-tags))
         (type (completing-read "移除字段: " field-types nil t)))
    (when type
      ;; 移除标签
      (org-toggle-tag type 'off)
      ;; 移除属性
      (org-entry-delete nil type)
      ;; 从注册表中移除
      (remhash type org-supertag-fields)
      (message "已移除字段: %s" type))))

(defun org-supertag-list-available-fields ()
  "显示所有可用的字段类型。"
  (interactive)
  (let ((types (hash-table-keys org-supertag-field-types)))
    (with-current-buffer (get-buffer-create "*Org SuperTag Fields*")
      (erase-buffer)
      (org-mode)
      (insert "* 可用的字段类型\n\n")
      (dolist (type types)
        (let* ((spec (gethash type org-supertag-field-types))
               (validator (plist-get spec :validator))
               (formatter (plist-get spec :formatter)))
          (insert (format "** %s\n" type))
          (insert (format "   - 验证器: %s\n" 
                         (if validator 
                             (documentation validator) 
                           "无")))
          (when formatter
            (insert (format "   - 格式化器: %s\n" 
                          (documentation formatter))))))
      (goto-char (point-min))
      (display-buffer (current-buffer)))))

;;----------------------------------------------------------------------
;; Field 模板管理
;;----------------------------------------------------------------------

(defun org-supertag-make-validator (pattern &optional description)
  "创建一个基于正则表达式 PATTERN 的验证器。
可选的 DESCRIPTION 用于提供验证规则的说明。"
  (let ((validator (lambda (value)
                    (and (stringp value)
                         (string-match-p pattern value)))))
    (when description
      (put validator 'function-documentation description))
    validator))

(defun org-supertag-define-field-type ()
  "交互式定义新的字段类型。"
  (interactive)
  (let* ((type (read-string "字段类型名称: "))
         (pattern (read-string "验证模式 (正则表达式): "))
         (description (read-string "字段描述: "))
         (validator (org-supertag-make-validator pattern description))
         (formatter (lambda (value)
                     (when (and value (stringp value))
                       (string-trim value)))))
    (org-supertag-register-field-type
     type
     `(:validator ,validator
       :formatter ,formatter))
    (message "已添加字段类型: %s" type)))

(defun org-supertag-edit-field-type ()
  "编辑现有字段类型的定义。"
  (interactive)
  (let* ((types (hash-table-keys org-supertag-field-types))
         (type (completing-read "选择要编辑的字段类型: " types nil t))
         (spec (gethash type org-supertag-field-types))
         (old-validator (plist-get spec :validator))
         (old-pattern (when old-validator
                       (get old-validator 'validation-pattern)))
         (pattern (read-string "验证模式 (正则表达式): "
                             (or old-pattern "")))
         (description (read-string "字段描述: "
                                 (or (documentation old-validator) "")))
         (validator (org-supertag-make-validator pattern description))
         (formatter (lambda (value)
                     (when (and value (stringp value))
                       (string-trim value)))))
    (org-supertag-register-field-type
     type
     `(:validator ,validator
       :formatter ,formatter))
    (message "已更新字段类型: %s" type)))

(defun org-supertag-remove-field-type ()
  "删除字段类型。"
  (interactive)
  (let* ((types (hash-table-keys org-supertag-field-types))
         (type (completing-read "选择要删除的字段类型: " types nil t)))
    (when (and type
               (yes-or-no-p (format "确定要删除字段类型 '%s' 吗？" type)))
      (remhash type org-supertag-field-types)
      (message "已删除字段类型: %s" type))))

(defun org-supertag-list-field-types ()
  "显示所有字段类型的详细信息。"
  (interactive)
  (let ((types (hash-table-keys org-supertag-field-types)))
    (with-current-buffer (get-buffer-create "*Org SuperTag Field Types*")
      (erase-buffer)
      (org-mode)
      (insert "* 字段��型定义\n\n")
      (dolist (type (sort types #'string<))
        (let* ((spec (gethash type org-supertag-field-types))
               (validator (plist-get spec :validator)))
          (insert (format "** %s\n" type))
          (when validator
            (insert (format "   - 描述: %s\n" 
                          (or (documentation validator) "无描述"))))
          (insert "\n")))
      (goto-char (point-min))
      (display-buffer (current-buffer)))))

;;----------------------------------------------------------------------
;; 快捷键绑定 & 菜单定义
;;----------------------------------------------------------------------

(easy-menu-define org-supertag-menu org-mode-map
  "Menu for Org SuperTag"
  '("SuperTag"
    ["添加字段" org-supertag-add-field-to-entry t]
    ["移除字段" org-supertag-remove-field-from-entry t]
    ["编辑字段" org-supertag-edit-field t]
    ["编辑所有字段" org-supertag-edit-all-fields t]
    "---"
    ["定义新字段类型" org-supertag-define-field-type t]
    ["编辑字段类型" org-supertag-edit-field-type t]
    ["删除字段类型" org-supertag-remove-field-type t]
    ["查看字段模板" org-supertag-view-field-template t]
    ["列出字段模板" org-supertag-list-field-templates t]
    ["编辑字段模板" org-supertag-edit-field-template t]))

;; 更新快捷键绑定
(define-key org-mode-map (kbd "C-c f e") #'org-supertag-edit-field)
(define-key org-mode-map (kbd "C-c f a") #'org-supertag-edit-all-fields)
(define-key org-mode-map (kbd "C-c f +") #'org-supertag-add-field-to-entry)
(define-key org-mode-map (kbd "C-c f -") #'org-supertag-remove-field-from-entry)
(define-key org-mode-map (kbd "C-c f t n") #'org-supertag-define-field-type)
(define-key org-mode-map (kbd "C-c f t e") #'org-supertag-edit-field-type)
(define-key org-mode-map (kbd "C-c f t d") #'org-supertag-remove-field-type)
(define-key org-mode-map (kbd "C-c f t l") #'org-supertag-list-field-types)
(define-key org-mode-map (kbd "C-c f t v") #'org-supertag-view-field-template)

;;----------------------------------------------------------------------
;; 错误处理
;;----------------------------------------------------------------------

(define-error 'org-supertag-field-error "Org SuperTag Field Error")
(define-error 'org-supertag-invalid-field-type "Invalid field type" 'org-supertag-field-error)
(define-error 'org-supertag-invalid-field-value "Invalid field value" 'org-supertag-field-error)

(defun org-supertag-field-error (format-string &rest args)
  "报告字段错误。"
  (signal 'org-supertag-field-error (list (apply #'format format-string args))))

(defmacro org-supertag-field-with-error-handling (&rest body)
  "处理字段操作中的错误。"
  `(condition-case err
       (progn ,@body)
     (org-supertag-field-error
      (message "字段错误: %s" (cadr err))
      nil)
     (error
      (message "未预期的错误: %s" err)
      nil)))



(provide 'org-supertag-field)
;;; org-supertag-field.el ends here