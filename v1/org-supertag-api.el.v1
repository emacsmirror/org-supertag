;;; org-supertag-api.el --- Core API for org-supertag -*- lexical-binding: t; -*-



;;; API Version Control

(defconst org-supertag-api-version "1.0.0"
  "Current version of the org-supertag API.")

(defvar org-supertag-api-compatibility-version "1.0.0"
  "Minimum compatible API version.")

;;; Data API

;; Node Operations
(cl-defgeneric org-supertag-api-create-node (content &optional tags properties)
  "Create a new node with CONTENT, TAGS and PROPERTIES.")

(cl-defgeneric org-supertag-api-update-node (node &key content tags properties)
  "Update NODE with new CONTENT, TAGS or PROPERTIES.")

(cl-defgeneric org-supertag-api-delete-node (node)
  "Delete NODE.")

(cl-defgeneric org-supertag-api-get-node (id)
  "Get node by ID.")

;; Tag Operations
(cl-defgeneric org-supertag-api-create-tag (name &optional parent fields)
  "Create a new tag with NAME, optional PARENT and FIELDS.")

(cl-defgeneric org-supertag-api-update-tag (tag &key fields parent)
  "Update TAG definition.")

(cl-defgeneric org-supertag-api-delete-tag (tag)
  "Delete TAG definition.")

;; Field Operations
(cl-defgeneric org-supertag-api-add-field (tag field)
  "Add FIELD to TAG.")

(cl-defgeneric org-supertag-api-remove-field (tag field-name)
  "Remove field with FIELD-NAME from TAG.")

(cl-defgeneric org-supertag-api-update-field (tag field-name updates)
  "Update field with FIELD-NAME in TAG with UPDATES.")

;;; Query API

(defclass org-supertag-query ()
  ((conditions :initarg :conditions
              :type list
              :documentation "Query conditions")
   (sort :initarg :sort
         :initform nil
         :documentation "Sort specification")
   (limit :initarg :limit
          :initform nil
          :documentation "Result limit")
   (offset :initarg :offset
           :initform 0
           :documentation "Result offset"))
  "Class representing a query.")

(cl-defmethod org-supertag-api-execute-query ((query org-supertag-query))
  "Execute QUERY and return results.")

(cl-defmethod org-supertag-api-count-query ((query org-supertag-query))
  "Count results for QUERY without executing it.")

;; Query Builder
(defclass org-supertag-query-builder ()
  ((query :initform (make-instance 'org-supertag-query)))
  "Builder for constructing queries.")

(cl-defmethod org-supertag-api-where ((builder org-supertag-query-builder) condition)
  "Add WHERE condition to query.")

(cl-defmethod org-supertag-api-order-by ((builder org-supertag-query-builder) field &optional direction)
  "Add ORDER BY clause to query.")

(cl-defmethod org-supertag-api-limit ((builder org-supertag-query-builder) limit)
  "Set LIMIT for query.")

;;; Event API

(cl-defgeneric org-supertag-api-emit-event (type payload)
  "Emit event of TYPE with PAYLOAD.")

(cl-defgeneric org-supertag-api-on (event-type handler)
  "Register HANDLER for EVENT-TYPE.")

(cl-defgeneric org-supertag-api-off (event-type handler)
  "Unregister HANDLER for EVENT-TYPE.")

;;; Transaction API

(defmacro org-supertag-api-with-transaction (&rest body)
  "Execute BODY within a transaction."
  (declare (indent 0))
  `(org-supertag--with-transaction
    (lambda () ,@body)))

(cl-defgeneric org-supertag-api-begin-transaction ()
  "Begin a new transaction.")

(cl-defgeneric org-supertag-api-commit-transaction ()
  "Commit the current transaction.")

(cl-defgeneric org-supertag-api-rollback-transaction ()
  "Rollback the current transaction.")

;;; Cache API

(cl-defgeneric org-supertag-api-cache-get (key)
  "Get cached value for KEY.")

(cl-defgeneric org-supertag-api-cache-set (key value &optional ttl)
  "Set cache VALUE for KEY with optional TTL.")

(cl-defgeneric org-supertag-api-cache-delete (key)
  "Delete cache entry for KEY.")

(cl-defgeneric org-supertag-api-cache-clear ()
  "Clear all cache entries.")

;;; View API

(cl-defgeneric org-supertag-api-register-view (view)
  "Register VIEW definition.")

(cl-defgeneric org-supertag-api-update-view (view-name updates)
  "Update view with VIEW-NAME.")

(cl-defgeneric org-supertag-api-delete-view (view-name)
  "Delete view with VIEW-NAME.")

(cl-defgeneric org-supertag-api-render-view (view-name &optional data)
  "Render view with VIEW-NAME using optional DATA.")

;;; Extension API

(cl-defgeneric org-supertag-api-register-extension (extension)
  "Register EXTENSION.")

(cl-defgeneric org-supertag-api-unregister-extension (name)
  "Unregister extension with NAME.")

(cl-defgeneric org-supertag-api-get-extension (name)
  "Get extension with NAME.")

;;; Hook API

(defmacro org-supertag-api-add-hook (hook function &optional append local)
  "Add FUNCTION to HOOK."
  `(add-hook ,hook ,function ,append ,local))

(defmacro org-supertag-api-remove-hook (hook function &optional local)
  "Remove FUNCTION from HOOK."
  `(remove-hook ,hook ,function ,local))

;;; API Documentation

(defun org-supertag-api-get-doc (function)
  "Get documentation for FUNCTION."
  (documentation function t))

(defun org-supertag-api-list-functions ()
  "List all available API functions."
  (let ((api-functions '()))
    (mapatoms
     (lambda (sym)
       (when (and (fboundp sym)
                  (string-prefix-p "org-supertag-api-" (symbol-name sym)))
         (push sym api-functions))))
    (sort api-functions #'string<)))

(provide 'org-supertag-api)
