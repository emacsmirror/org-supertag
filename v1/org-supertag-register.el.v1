;;; org-supertag-register.el --- Tag registration for org-supertag -*- lexical-binding: t; -*-

(require 'ht)

(defun org-supertag-register-tag (name &rest props)
  "Dynamically register a new tag with NAME and PROPS.
PROPS can include:
- :color - tag color
- :parent - parent tag name
- :properties - hash table of properties
- :children - list of child tag names"
  (let* ((parent (plist-get props :parent))
         (tag (make-instance 'org-supertag-tag
                           :name name
                           :parent (when parent) 
                                   (ht-get org-supertag-tags parent)
                           :properties (or (plist-get props :properties)
                                         (ht-create))
                           :children nil)))
    ;; Add to tag registry
    (ht-set! org-supertag-tags name tag)
    
    ;; Set up inheritance
    (when parent
      (org-supertag-set-parent name parent))
    
    ;; Add children if specified
    (dolist (child (plist-get props :children))
      (org-supertag-register-tag child :parent name))
    
    ;; Return the created tag
    tag))

(defun org-supertag-auto-register-tags (&optional threshold)
  "Auto-register frequently used tags.
Optional THRESHOLD specifies minimum usage count (default 3)."
  (interactive)
  (let* ((threshold (or threshold 3))
         (tag-counts (ht-create)))
    
    ;; Count tag occurrences
    (ht-each
     (lambda (_ node)
       (dolist (tag (oref node tags))
         (ht-set! tag-counts tag
                  (1+ (or (ht-get tag-counts tag) 0)))))
     org-supertag-nodes)
    
    ;; Register frequent tags
    (ht-each
     (lambda (tag count)
       (when (and (>= count threshold)
                 (not (ht-get org-supertag-tags tag)))
         (org-supertag-register-tag 
          tag
          :properties (ht-create))))
     tag-counts)))

(defun org-supertag-suggest-parent-tag (tag)
  "Suggest potential parent tags for TAG based on usage patterns."
  (let* ((nodes-with-tag (org-supertag-db-find-by-tag tag))
         (co-occurring-tags (ht-create)))
    
    ;; Count co-occurring tags
    (ht-each
     (lambda (_ node)
       (dolist (other-tag (oref node tags))
         (unless (equal other-tag tag)
           (ht-set! co-occurring-tags other-tag
                    (1+ (or (ht-get co-occurring-tags other-tag) 0))))))
     nodes-with-tag)
    
    ;; Find most frequent co-occurring tag
    (car
     (--max-by (> (cdr it) (cdr other))
               (ht-items co-occurring-tags)))))

(provide 'org-supertag-register)