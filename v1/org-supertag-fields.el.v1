;;; org-supertag-fields.el --- Field system for org-supertag -*- lexical-binding: t; -*-

(require 'eieio)
(require 'ht)
(require 'dash)

;;; Field Types

(defclass org-supertag-field ()
  ((name :initarg :name
         :type string
         :documentation "Field name")
   (type :initarg :type
         :type symbol
         :documentation "Field type")
   (required :initarg :required
            :initform nil
            :type boolean
            :documentation "Whether field is required")
   (default :initarg :default
           :initform nil
           :documentation "Default value")
   (validator :initarg :validator
             :initform nil
             :type (or null function)
             :documentation "Validation function"))
  "Base class for supertag fields.")

(defclass org-supertag-text-field (org-supertag-field)
  ((type :initform 'text))
  "Text field type.")

(defclass org-supertag-number-field (org-supertag-field)
  ((type :initform 'number))
  "Number field type.")

(defclass org-supertag-date-field (org-supertag-field)
  ((type :initform 'date))
  "Date field type.")

(defclass org-supertag-select-field (org-supertag-field)
  ((type :initform 'select)
   (options :initarg :options
           :type list
           :documentation "Available options"))
  "Select field type with predefined options.")

(defclass org-supertag-dynamic-field (org-supertag-field)
  ((dynamic :initform t
           :type boolean
           :documentation "Whether this field is dynamically created")
   (created-at :initform (current-time)
              :type time
              :documentation "When this field was created")
   (usage-count :initform 0
               :type integer
               :documentation "How many times this field has been used")))

;;; Field Registry

(defvar org-supertag-field-registry (ht-create)
  "Registry of field definitions for tags.")

(defun org-supertag-register-field (tag-name field)
  "Register FIELD for TAG-NAME."
  (let ((fields (or (ht-get org-supertag-field-registry tag-name)
                    (ht-create))))
    (ht-set! fields (oref field name) field)
    (ht-set! org-supertag-field-registry tag-name fields)))

(defun org-supertag-get-fields (tag-name)
  "Get all fields registered for TAG-NAME."
  (ht-get org-supertag-field-registry tag-name))

;;; Field Validation

(defun org-supertag-validate-field (field value)
  "Validate VALUE against FIELD definition."
  (let ((validator (oref field validator)))
    (cond
     ((null value)
      (when (oref field required)
        (error "Field %s is required" (oref field name))))
     (validator
      (unless (funcall validator value)
        (error "Invalid value for field %s" (oref field name))))
     (t t))))

(defun org-supertag-validate-node-fields (node)
  "Validate all fields in NODE."
  (dolist (tag (oref node tags))
    (when-let ((fields (org-supertag-get-fields tag)))
      (ht-each
       (lambda (field-name field)
         (org-supertag-validate-field
          field
          (ht-get (oref node properties) field-name)))
       fields))))

;;; Field Inheritance

(defvar org-supertag-inheritance-map (ht-create)
  "Map of tag inheritance relationships.")

(defun org-supertag-set-inheritance (child-tag parent-tag)
  "Set PARENT-TAG as parent of CHILD-TAG."
  (ht-set! org-supertag-inheritance-map child-tag parent-tag))

(defun org-supertag-get-inherited-fields (tag)
  "Get all fields for TAG including inherited ones."
  (let ((fields (ht-create))
        (current-tag tag))
    (while current-tag
      (when-let ((tag-fields (org-supertag-get-fields current-tag)))
        (ht-each
         (lambda (k v)
           (unless (ht-get fields k)
             (ht-set! fields k v)))
         tag-fields))
      (setq current-tag (ht-get org-supertag-inheritance-map current-tag)))
    fields))

;;; Field Synchronization

(defun org-supertag-sync-node-fields (node)
  "Synchronize fields in NODE based on its tags."
  (let ((all-fields (ht-create)))
    ;; Collect all fields from all tags
    (dolist (tag (oref node tags))
      (when-let ((fields (org-supertag-get-inherited-fields tag)))
        (ht-each
         (lambda (k v)
           (ht-set! all-fields k v))
         fields)))
    
    ;; Apply defaults for missing fields
    (ht-each
     (lambda (field-name field)
       (unless (ht-get (oref node properties) field-name)
         (when-let ((default (oref field default)))
           (ht-set! (oref node properties) field-name
                   (if (functionp default)
                       (funcall default)
                     default)))))
     all-fields)
    
    ;; Validate all fields
    (org-supertag-validate-node-fields node)))

;;; Field UI Helpers

(defun org-supertag-field-completion-table (field)
  "Generate completion table for FIELD."
  (pcase (oref field type)
    ('select (oref field options))
    ('text nil)
    ('number nil)
    ('date nil)))

(defun org-supertag-read-field-value (field)
  "Read value for FIELD with appropriate completion."
  (let ((prompt (format "Enter value for %s: " (oref field name)))
        (completion-table (org-supertag-field-completion-table field)))
    (if completion-table
        (completing-read prompt completion-table nil t)
      (read-string prompt))))

(defun org-supertag-add-dynamic-field (tag-name field-name &optional type props)
  "Dynamically add a new field to TAG-NAME."
  (let* ((type (or type 'text))
         (field (make-instance 'org-supertag-dynamic-field
                             :name field-name
                             :type type
                             :properties props)))
    (org-supertag-register-field tag-name field)
    ;; 触发事件
    (org-supertag-run-hooks 'after-field-add tag-name field-name)
    field))

(provide 'org-supertag-fields)
