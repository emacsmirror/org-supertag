;;; org-supertag.el --- Enhanced tag system for org-mode -*- lexical-binding: t; -*-

;; Author: Your Name <your-email@example.com>
;; Version: 0.1.0
;; Package-Requires: ((emacs "27.1") (org "9.4") (dash "2.19.1") (s "1.12.0") (ht "2.4"))
;; Keywords: org-mode, outlines
;; URL: https://github.com/yourusername/org-supertag

;;; Commentary:
;; org-supertag provides an enhanced tagging system for org-mode,
;; allowing for hierarchical tags, inherited properties, and dynamic views.

;;; Code:

(require 'org)
(require 'org-element)
(require 'dash)
(require 's)
(require 'ht)

(require 'org-supertag-db)
(require 'org-supertag-render)
(require 'org-supertag-views)
(require 'org-supertag-querye)
(require 'org-supertag-ai)  
(require 'org-supertag-automation.el)
(require 'org-supertag-ui)
(require 'org-supertag-triggers)
(require 'org-supertag-inheritance)
(require 'org-supertag-register)

;;; Custom Variables

(defgroup org-supertag nil
  "Enhanced tag system for org-mode."
  :group 'org
  :prefix "org-supertag-")

(defcustom org-supertag-tag-regex "#[[:alnum:]-_]+"
  "Regular expression to match supertags."
  :type 'string
  :group 'org-supertag)

;;; Core Data Structures

(defclass org-supertag-tag ()
  ((name :initarg :name
         :type string
         :documentation "Name of the tag")
   (parent :initarg :parent
           :type (or null org-supertag-tag)
           :documentation "Parent tag, if any")
   (properties :initarg :properties
               :type hash-table
               :documentation "Tag properties")
   (children :initarg :children
             :type list
             :documentation "Child tags"))
  "Represents a supertag with its properties and relationships.")

(defclass org-supertag-node ()
  ((id :initarg :id
       :type string
       :documentation "Unique identifier for the node")
   (content :initarg :content
            :type string
            :documentation "Node content")
   (tags :initarg :tags
         :type list
         :documentation "List of associated tags")
   (properties :initarg :properties
               :type hash-table
               :documentation "Node properties")
   (location :initarg :location
             :type marker
             :documentation "Location in buffer"))
  "Represents a node (heading or text) with supertags.")

;;; Parser Implementation

(defun org-supertag-parse-tags (content)
  "Extract supertags from CONTENT string."
  (let ((tags '()))
    (with-temp-buffer
      (insert content)
      (goto-char (point-min))
      (while (re-search-forward org-supertag-tag-regex nil t)
        (push (match-string 0) tags)))
    (nreverse tags)))

(defun org-supertag-parse-element (element)
  "Parse an org ELEMENT and extract supertag information."
  (let* ((type (org-element-type element))
         (begin (org-element-property :begin element))
         (end (org-element-property :end element))
         (content (buffer-substring-no-properties begin end))
         (tags (org-supertag-parse-tags content)))
    (when tags
      (make-instance 'org-supertag-node
                    :id (org-id-get-create)
                    :content content
                    :tags tags
                    :properties (ht-create)
                    :location (set-marker (make-marker) begin)))))

(defun org-supertag-parse-buffer ()
  "Parse current buffer and return list of nodes with supertags."
  (let ((ast (org-element-parse-buffer))
        (nodes '()))
    (org-element-map ast '(headline paragraph)
      (lambda (element)
        (when-let ((node (org-supertag-parse-element element)))
          (push node nodes))))
    (nreverse nodes)))

;;; Database Interface

(defvar org-supertag-nodes (ht-create)
  "Hash table storing all supertag nodes.")

(defvar org-supertag-tags (ht-create)
  "Hash table storing all supertag definitions.")

(defun org-supertag-db-add-node (node)
  "Add or update NODE in the database."
  (ht-set! org-supertag-nodes (oref node id) node))

(defun org-supertag-db-get-node (id)
  "Get node by ID from the database."
  (ht-get org-supertag-nodes id))

(defun org-supertag-db-get-nodes-by-tag (tag)
  "Find all nodes with TAG."
  (ht-select
   (lambda (_ node)
     (member tag (oref node tags)))
   org-supertag-nodes))

;;; Cache System

(defvar org-supertag--cache-enabled t
  "Whether to use caching.")

(defvar org-supertag--cache (ht-create)
  "Cache for supertag operations.")

(defun org-supertag-cache-clear ()
  "Clear the supertag cache."
  (setq org-supertag--cache (ht-create)))

(defun org-supertag-cache-get (key)
  "Get cached value for KEY."
  (when org-supertag--cache-enabled
    (ht-get org-supertag--cache key)))

(defun org-supertag-cache-set (key value)
  "Set cache VALUE for KEY."
  (when org-supertag--cache-enabled
    (ht-set! org-supertag--cache key value)))

;;; Public Interface

(defun org-supertag-scan-buffer ()
  "Scan current buffer and update supertag database."
  (interactive)
  (let ((nodes (org-supertag-parse-buffer)))
    (dolist (node nodes)
      (org-supertag-db-add-node node))
    (message "Scanned %d nodes with supertags." (length nodes))))

(defun org-supertag-find-tag (tag)
  "Find all nodes with TAG and return them."
  (interactive "sEnter tag (with #): ")
  (org-supertag-db-find-by-tag tag))

(provide 'org-supertag)
;;; org-supertag.el ends here
