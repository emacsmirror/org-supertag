;;; org-supertag-ai.el --- AI integration core for org-supertag -*- lexical-binding: t; -*-

(require 'gptel)
(require 'json)
(require 'promise)
(require 'async)

;;; AI Service Interface

(defclass org-supertag-ai-service ()
  ((name :initarg :name
         :type string
         :documentation "Service name")
   (config :initarg :config
           :type hash-table
           :documentation "Service configuration")
   (client :initarg :client
           :documentation "Service client instance"))
  "Base class for AI service providers.")

(cl-defmethod org-supertag-ai-request ((service org-supertag-ai-service) prompt &optional options)
  "Send request to AI service. Must be implemented by subclasses."
  (error "Method not implemented"))

;;; GPT Service Implementation

(defclass org-supertag-gpt-service (org-supertag-ai-service)
  ((model :initarg :model
          :initform "gpt-3.5-turbo"
          :type string
          :documentation "GPT model to use")
   (temperature :initarg :temperature
                :initform 0.7
                :type number
                :documentation "Response temperature"))
  "GPT service implementation.")

(cl-defmethod org-supertag-ai-request ((service org-supertag-gpt-service) prompt &optional options)
  "Send request to GPT service."
  (promise-new
   (lambda (resolve reject)
     (gptel-request
      prompt
      :model (oref service model)
      :temperature (oref service temperature)
      :system (plist-get options :system)
      :callback (lambda (response)
                 (if response
                     (funcall resolve response)
                   (funcall reject "GPT request failed")))))))

;;; Task Queue Management

(defvar org-supertag-ai-task-queue nil
  "Queue of pending AI tasks.")

(defclass org-supertag-ai-task ()
  ((id :initarg :id
       :type string
       :documentation "Task ID")
   (prompt :initarg :prompt
          :type string
          :documentation "AI prompt")
   (options :initarg :options
            :documentation "Task options")
   (callback :initarg :callback
             :type function
             :documentation "Completion callback")
   (error-handler :initarg :error-handler
                  :type function
                  :documentation "Error handler")
   (status :initform 'pending
           :type symbol
           :documentation "Task status"))
  "Represents an AI task.")

(defun org-supertag-ai-process-queue ()
  "Process pending AI tasks."
  (when-let ((task (pop org-supertag-ai-task-queue)))
    (oset task status 'processing)
    (org-supertag-ai-request
     org-supertag-default-service
     (oref task prompt)
     (oref task options)
     :success (lambda (response)
               (oset task status 'completed)
               (funcall (oref task callback) response))
     :error (lambda (error)
             (oset task status 'failed)
             (funcall (oref task error-handler) error)))))

;;; Prompt Management

(defclass org-supertag-prompt-template ()
  ((name :initarg :name
         :type string
         :documentation "Template name")
   (template :initarg :template
            :type string
            :documentation "Prompt template")
   (variables :initarg :variables
              :type list
              :documentation "Template variables")
   (options :initarg :options
            :documentation "Default options"))
  "Class for prompt templates.")

(defun org-supertag-format-prompt (template &rest args)
  "Format prompt TEMPLATE with ARGS."
  (if (= (length args) (length (oref template variables)))
      (apply #'format (oref template template) args)
    (error "Wrong number of arguments for prompt template")))

;;; Core AI Functions

;; Text Analysis
(defun org-supertag-ai-analyze-content (content &optional options)
  "Analyze content and return structured information."
  (org-supertag-ai-request
   org-supertag-default-service
   (org-supertag-format-prompt
    org-supertag-analyze-template
    content)
   options))

;; Tag Suggestion
(defun org-supertag-ai-suggest-tags (content &optional context)
  "Suggest tags for content based on context."
  (org-supertag-ai-request
   org-supertag-default-service
   (org-supertag-format-prompt
    org-supertag-tag-template
    content
    (or context ""))
   '(:system "You are a tag suggestion system...")))

;; Field Completion
(defun org-supertag-ai-complete-fields (node &optional fields)
  "Complete missing fields in node."
  (let ((content (oref node content))
        (existing-fields (oref node properties)))
    (org-supertag-ai-request
     org-supertag-default-service
     (org-supertag-format-prompt
      org-supertag-field-template
      content
      (json-encode existing-fields)
      (json-encode fields))
     '(:system "You are a field completion assistant..."))))

;;; Predefined Templates

(defvar org-supertag-analyze-template
  (make-instance 'org-supertag-prompt-template
    :name "analyze"
    :template "Analyze the following content and provide key information:

Content:
%s

Please provide:
1. Main topics
2. Key object
3. Sentiment
4. Important dates
5. Action items

Format the response as JSON."
    :variables '(content)))

(defvar org-supertag-tag-template
  (make-instance 'org-supertag-prompt-template
    :name "suggest-tags"
    :template "Suggest relevant tags for the following content:

Content:
%s

Context:
%s

Provide tags in JSON format with explanations."
    :variables '(content context)))

(defvar org-supertag-field-template
  (make-instance 'org-supertag-prompt-template
    :name "complete-fields"
    :template "Complete the missing fields based on the content:

Content:
%s

Existing fields:
%s

Required fields:
%s

Provide completions in JSON format."
    :variables '(content existing-fields required-fields)))

;;; Integration Hooks

(defvar org-supertag-ai-analyze-hook nil
  "Hook run after content analysis.")

(defvar org-supertag-ai-suggest-hook nil
  "Hook run after tag suggestion.")

(defvar org-supertag-ai-complete-hook nil
  "Hook run after field completion.")

(provide 'org-supertag-ai)
