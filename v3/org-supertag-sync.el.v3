;;; org-supertag-sync.el --- Synchronization for org-supertag -*- lexical-binding: t; -*-

;;; Commentary:
;; 管理 org-supertag 与 org-mode 之间的同步。
;; 提供两种同步策略：
;; 1. 直接同步：通过 org-mode 钩子实现
;; 2. 缓存同步：利用 org-element-cache

(require 'org)
(require 'org-element)
(require 'org-id)

;;----------------------------------------------------------------------
;; 配置选项
;;----------------------------------------------------------------------

(defgroup org-supertag-sync nil
  "Org SuperTag 同步配置。"
  :group 'org-supertag)

(defcustom org-supertag-sync-strategy 'direct
  "同步策略。
可选值：
- cache: 使用 org-element-cache（推荐，需要 org-mode 9.3+）
- direct: 使用直接同步"
  :type '(choice (const :tag "使用缓存" cache)
                (const :tag "直接同步" direct))
  :group 'org-supertag-sync)

(defcustom org-supertag-sync-auto t
  "是否自动同步。"
  :type 'boolean
  :group 'org-supertag-sync)

;;----------------------------------------------------------------------
;; 状态变量
;;----------------------------------------------------------------------

(defvar org-supertag-sync--enabled nil
  "同步是否已启用。")

(defvar org-supertag-sync--cache-enabled nil
  "缓存同步是否已启用。")

(defvar org-supertag-sync--state-stack nil
  "同步状态的栈，用于跟踪状态变化。")

(defvar org-supertag-sync--change-log nil
  "记录数据变化的日志。")

;;----------------------------------------------------------------------
;; 核心功能
;;----------------------------------------------------------------------

(cl-defmacro org-supertag-sync-with-sync-enabled (&rest body)
  "在启用同步的情况下执行 BODY。"
  (declare (indent 0))
  `(let ((org-supertag-sync--enabled-before org-supertag-sync--enabled))
     (unwind-protect
         (progn
           (setq org-supertag-sync--enabled t)
           ,@body)
       (setq org-supertag-sync--enabled org-supertag-sync--enabled-before))))

(defun org-supertag-sync-enabled-p ()
  "返回同步是否已启用。"
  (and (boundp 'org-supertag-sync--enabled)
       org-supertag-sync--enabled))

(defun org-supertag-sync-enable ()
  "启用同步。"
  (interactive)
  (let ((caller (backtrace-frame 1)))
    (message "正在启用同步 - 调用者: %S, 栈: %S" caller org-supertag-sync--state-stack)
    (unless (org-supertag-sync-enabled-p)
      (pcase org-supertag-sync-strategy
        ('cache
         (unless org-supertag-sync--cache-enabled
           (org-supertag-sync--setup-cache)))
        ('direct
         (org-supertag-sync--setup-direct-hooks)))
      (push (cons t (current-time-string)) org-supertag-sync--state-stack)
      (setq org-supertag-sync--enabled t)
      (message "Org SuperTag 同步已启用 - 栈: %S" org-supertag-sync--state-stack))))

(defun org-supertag-sync-disable ()
  "禁用同步。"
  (interactive)
  (let ((caller (backtrace-frame 1)))
    (message "正在禁用同步 - 调用者: %S, 栈: %S" caller org-supertag-sync--state-stack)
    (when (org-supertag-sync-enabled-p)
      (pcase org-supertag-sync-strategy
        ('cache
         (when org-supertag-sync--cache-enabled
           (org-supertag-sync--cleanup-cache)))
        ('direct
         (org-supertag-sync--cleanup-direct-hooks)))
      (push (cons nil (current-time-string)) org-supertag-sync--state-stack)
      (setq org-supertag-sync--enabled nil)
      (message "Org SuperTag 同步已禁用 - 栈: %S" org-supertag-sync--state-stack))))

;;----------------------------------------------------------------------
;; 缓存同步实现
;;----------------------------------------------------------------------

(defun org-supertag-sync--setup-cache ()
  "设置缓存同步。"
  (unless org-element-use-cache
    (warn "org-element-cache 未启用，某些功能可能无法正常工作"))
  
  ;; 启用缓存
  (setq org-element-use-cache t)
  
  ;; 添加变化监听器
  (add-hook 'org-element-cache-change-functions
            #'org-supertag-sync--handle-cache-change)
  
  (setq org-supertag-sync--cache-enabled t))

(defun org-supertag-sync--cleanup-cache ()
  "清理缓存同步。"
  (remove-hook 'org-element-cache-change-functions
               #'org-supertag-sync--handle-cache-change)
  (setq org-supertag-sync--cache-enabled nil))

(defun org-supertag-sync--handle-cache-change (type element)
  "处理缓存变化。
TYPE 是变化类型（:remove/:add/:change）
ELEMENT 是变化的元素。"
  (let ((element-type (org-element-type element)))
    (message "处理缓存变化 - 类型: %S, 元素类型: %S" type element-type)
    (pcase element-type
      ('headline
       (org-supertag-sync--process-headline-change type element))
      ('property-drawer
       (org-supertag-sync--process-property-change type element))
      ('plain-list
       (when (eq (org-element-property :type element) 'tag)
         (org-supertag-sync--process-tag-change type element))))))

;;----------------------------------------------------------------------
;; 直接同步实现
;;----------------------------------------------------------------------

(defun org-supertag-sync--setup-direct-hooks ()
  "设置直接同步钩子。"
  (add-hook 'org-after-tags-change-hook
            #'org-supertag-sync--handle-tags-change)
  (add-hook 'org-after-property-change-hook
            #'org-supertag-sync--handle-property-change)
  (add-hook 'org-after-promote-entry-hook
            #'org-supertag-sync--handle-level-change)
  (add-hook 'org-after-demote-entry-hook
            #'org-supertag-sync--handle-level-change))

(defun org-supertag-sync--cleanup-direct-hooks ()
  "清理直接同步钩子。"
  (remove-hook 'org-after-tags-change-hook
               #'org-supertag-sync--handle-tags-change)
  (remove-hook 'org-after-property-change-hook
               #'org-supertag-sync--handle-property-change)
  (remove-hook 'org-after-promote-entry-hook
               #'org-supertag-sync--handle-level-change)
  (remove-hook 'org-after-demote-entry-hook
               #'org-supertag-sync--handle-level-change))

;;----------------------------------------------------------------------
;; 变化处理器
;;----------------------------------------------------------------------

(defun org-supertag-sync--ensure-org-mode ()
  "确保当前缓冲区处于 org-mode。"
  (unless (derived-mode-p 'org-mode)
    (org-mode)
    (message "切换到 org-mode")))


(defun org-supertag-db-ensure-cleanup (store-name id)
  "确保指定存储中的数据被完全清理。"
  (when-let ((store (org-supertag-db-get-store store-name)))
    (message "清理存储 %S 中的数据 %S" store-name id)
    (remhash id store)
    ;; 验证清理结果
    (should-not (gethash id store))
    (message "数据清理完成 - 存储: %S, ID: %S" store-name id)))

(defun org-supertag-sync--get-headline-at-point ()
  "获取当前位置的标题元素。
如果当前不在标题位置，尝试找到最近的标题。"
  (save-excursion
    (org-element-cache-reset)  ; 确保缓存是最新的
    (let ((element (org-element-at-point)))
      ;; 如果已经是标题元素，直接返回
      (if (eq (org-element-type element) 'headline)
          (progn
            (message "直接获取到标题元素: %S" element)
            element)
        ;; 否则，尝试解析整个缓冲区并找到第一个标题
        (message "当前缓冲区内容:\n%s" (buffer-string))
        (let* ((parsed (org-element-parse-buffer))
               (first-headline (org-element-map parsed 'headline
                               (lambda (hl)
                                 (message "找到标题: %S" hl)
                                 hl)
                               nil t)))
          (if first-headline
              (progn
                (message "通过解析找到标题: %S" first-headline)
                first-headline)
            (message "缓冲区内容解析结果: %S" parsed)
            (error "缓冲区中没有找到标题元素")))))))

;; 修改 process-headline-change 函数以返回删除的数据
(defun org-supertag-sync--process-headline-change (type element)
  "处理标题变化。返回被删除的数据（如果是删除操作）。"
  (when-let* ((node-id (org-element-property :ID element)))
    (message "处理标题变化 - 类型: %S, ID: %S" type node-id)
    (message "当前元素: %S" element)
    (let* ((headline (org-element-property :raw-value element))
           (tags (org-element-property :tags element))
           (todo-keyword (org-element-property :todo-keyword element))
           (properties (org-entry-properties nil 'all))
           (old-data (org-supertag-db-get 'nodes node-id))
           (new-data (list :id node-id
                          :headline (if todo-keyword
                                      (concat todo-keyword " " headline)
                                    headline)
                          :tags tags
                          :properties properties)))
      (message "当前标题: %S, TODO状态: %S" headline todo-keyword)
      (message "当前属性: %S" properties)
      (pcase type
        (:add
         (message "创建节点 - 标题: %S" headline)
         (org-supertag-db-put 'nodes node-id new-data)
         (org-supertag-sync--log-change :create node-id nil new-data)
         new-data)
        (:change
         (message "更新节点 - ID: %S" node-id)
         (message "旧数据: %S" old-data)
         (message "新数据: %S" new-data)
         (unless (equal old-data new-data)
           (org-supertag-db-put 'nodes node-id new-data)
           (org-supertag-sync--log-change :update node-id old-data new-data))
         new-data)
        (:remove
         (message "删除节点 - ID: %S" node-id)
         (when old-data
           (org-supertag-db-delete 'nodes node-id)
           (org-supertag-sync--log-change :delete node-id old-data nil)
           old-data))))))

(defun org-supertag-sync--process-property-change (type element)
  "处理属性变化。"
  (when-let* ((headline (org-element-property :parent element))
              (node-id (org-element-property :ID headline)))
    (org-supertag-sync--update-node-properties node-id element)))

(defun org-supertag-sync--process-tag-change (type element)
  "处理标签变化。"
  (when-let* ((headline (org-element-property :parent element))
              (node-id (org-element-property :ID headline)))
    (org-supertag-sync--update-node-tags node-id element)))

;;----------------------------------------------------------------------
;; Sync functions
;;----------------------------------------------------------------------

(defun org-supertag-sync--create-node (node-id element)
  "创建新节点。
NODE-ID 是节点的唯一标识。
ELEMENT 是 org-element 结构。"
  (let ((headline (org-element-property :raw-value element))
        (tags (org-element-property :tags element))
        (properties (org-entry-properties nil 'all)))
    ;; 在数据库中创建节点
    (org-supertag-db-put 'nodes node-id
                         (list :headline headline
                               :tags tags
                               :properties properties))))

(defun org-supertag-sync--update-node (node-id element)
  "更新现有节点。
NODE-ID 是节点的唯一标识。
ELEMENT 是 org-element 结构。"
  (let ((headline (org-element-property :raw-value element))
        (tags (org-element-property :tags element))
        (properties (org-entry-properties nil 'all)))
    (message "更新节点 - ID: %S, 标题: %S" node-id headline)
    ;; 使用 org-supertag-db-put 而不是 update
    (org-supertag-db-put 'nodes node-id
                         (list :id node-id
                               :headline headline
                               :tags tags
                               :properties properties))))

(defun org-supertag-sync--remove-node (node-id)
  "删除节点。
NODE-ID 是节点的唯一标识。"
  ;; 从数据库中删除节点
  (org-supertag-db-delete 'nodes node-id))

(defun org-supertag-sync--update-node-properties (node-id element)
  "更新节点的属性。
NODE-ID 是节点的唯一标识。
ELEMENT 是 org-element 结构。"
  (let ((properties (org-entry-properties nil 'all)))
    ;; 更新数据库中的节点属性
    (org-supertag-db-update 'nodes node-id
                            (list :properties properties))))

(defun org-supertag-sync--update-node-tags (node-id element)
  "更新节点的标签。
NODE-ID 是节点的唯一标识。
ELEMENT 是 org-element 结构。"
  (let ((tags (org-element-property :tags element)))
    ;; 更新数据库中的节点标签
    (org-supertag-db-update 'nodes node-id
                            (list :tags tags))))

;;----------------------------------------------------------------------
;; 节点同步
;;----------------------------------------------------------------------

(defun org-supertag-sync-node-to-org (node-id)
  "将节点数据同步到 org-mode。"
  (if-let ((node (org-supertag-node-get node-id)))
      (if-let ((marker (org-id-find node-id t)))
          (org-with-point-at marker
            (let ((element (org-element-at-point)))
              ;; 同步标签
              (let* ((tag-rels (org-supertag-db-get-node-tags node-id))
                     (tag-names (mapcar 
                                (lambda (rel)
                                  (when-let* ((tag-id (org-supertag-node-tag-rel-tag-id rel))
                                             (tag (org-supertag-db-get 'tags tag-id)))
                                    (concat "#" (org-supertag-tag-name tag))))
                                tag-rels)))
                (org-element-put-property element :tags (delq nil tag-names))
                (org-set-tags (delq nil tag-names)))
        
              ;; 同步字段值
              (let ((field-rels (org-supertag-db-get-node-fields node-id))
                    (drawer (org-element-property :drawer element)))
                (unless drawer
                  (setq drawer (org-element-create 'property-drawer nil nil))
                  (org-element-set-element 
                   (org-element-property :contents-begin element)
                   drawer))
                (dolist (rel field-rels)
                  (let* ((field-id (org-supertag-node-field-rel-field-id rel))
                         (field (org-supertag-db-get 'fields field-id))
                         (value (org-supertag-node-field-rel-value rel)))
                    (when value
                      (let ((prop-name (upcase (org-supertag-field-name field))))
                        (org-element-put-property drawer prop-name value)
                        (org-entry-put nil prop-name (format "%s" value))))))))))))

(defun org-supertag-sync-node-from-org (node-id)
  "从 org-mode 同步节点数据。"
  (if-let ((marker (org-id-find node-id t)))
      (org-with-point-at marker
        (let ((element (org-element-at-point)))
          ;; 同步标签
          (let* ((org-tags (org-element-property :tags element))
                 (supertags (seq-filter (lambda (tag) 
                                        (string-prefix-p "#" tag))
                                      org-tags)))
            (dolist (tag supertags)
              (when-let* ((tag-name (substring tag 1))
                         (tag (org-supertag-db-get-by 'tags :name tag-name)))
                (org-supertag-node-add-tag node-id (org-supertag-tag-id tag)))
        
          ;; 同步属性
          (when-let ((drawer (org-element-property :drawer element)))
            (org-element-map drawer 'node-property
              (lambda (prop)
                (let ((name (downcase (org-element-property :key prop)))
                      (value (org-element-property :value prop)))
                  (when (org-supertag-db-get 'fields name)
                    (org-supertag-node-set-property node-id name value))))))))))))  

;;----------------------------------------------------------------------
;; Tag sync
;;----------------------------------------------------------------------

(defun org-supertag-sync--create-tag (name &rest props)
  "创建新标签。
NAME 是标签名称。
PROPS 是属性列表，可包含 :description, :owner-id 等。"
  (let* ((id (or (plist-get props :id) 
                 (org-supertag-tag--generate-id)))
         (tag (make-org-supertag-tag
               :id id
               :name name
               :description (or (plist-get props :description) "")
               :owner-id (plist-get props :owner-id)
               :metadata (or (plist-get props :metadata)
                           `(:created-at ,(current-time))))))
    
    ;; 存储标签
    (org-supertag-db-put 'tags id tag)
    tag))

;; 确保在同步标签时使用正确的数据库操作函数
(defun org-supertag-sync--update-tag (tag-id &rest props)
  "更新现有标签。
TAG-ID 是标签的唯一标识。
PROPS 是属性列表，可包含 :name, :description 等。"
  (if-let ((tag (org-supertag-tag-get tag-id)))
      (progn
        (dolist (prop props)
          (plist-put tag (car prop) (cdr prop)))
        (org-supertag-db-put 'tags tag-id tag))))

;; 确保数据一致性检查使用正确的字段
(defun org-supertag-sync--verify-tag-consistency (tag-id)
  "验证标签数据的一致性。"
  (if-let ((db-data (org-supertag-db-get 'tags tag-id)))
      (if-let ((element (org-supertag-tag-get tag-id)))
          (progn
            (let ((name (org-supertag-tag-name element))
                  (description (org-supertag-tag-description element)))
              (message "数据一致性检查:\nDB数据: %S\n实际名称: %S\n实际描述: %S" 
                       db-data name description)
              (should (equal (plist-get db-data :name) name))
              (should (equal (plist-get db-data :description) description)))))))

;;----------------------------------------------------------------------
;; 缓存监听器
;;----------------------------------------------------------------------

(defun org-supertag-sync--handle-element-change (type element)
  "处理元素变化。
TYPE 是变化类型（:add/:remove/:change）
ELEMENT 是变化的元素。"
  (if-let ((node-id (org-element-property :ID element)))
      (pcase type
        (:add
         (org-supertag-sync-node-from-org node-id))
        (:change
         (org-supertag-sync-node-from-org node-id))
        (:remove
         (org-supertag-node-delete node-id)))))

(defun org-supertag-sync-init ()
  "初始化同步系统。"
  ;; 添加缓存变化监听器
  (add-hook 'org-element-cache-change-functions
            #'org-supertag-sync--handle-element-change)
  
  (message "同步系统初始化完成"))

;; 添加同步状态变化的监控函数
(defun org-supertag-sync--monitor-state-change (symbol newval operation where)
  "监控同步状态的变化。"
  (let ((caller (backtrace-frame 1)))
    (message "同步状态变化 - 符号: %S, 新值: %S, 操作: %S, 位置: %S, 调用者: %S"
             symbol newval operation where caller)
    (message "状态栈: %S" org-supertag-sync--state-stack)))

;; 添加变量监控
(add-variable-watcher 'org-supertag-sync--enabled
                     #'org-supertag-sync--monitor-state-change)

(defun org-supertag-sync--log-change (type node-id old-data new-data)
  "记录数据变化。
TYPE 可以是 :create, :update 或 :delete
NODE-ID 是节点的唯一标识符
OLD-DATA 是变化前的数据
NEW-DATA 是变化后的数据"
  (push (list :time (current-time-string)
              :type type
              :node-id node-id
              :old-data old-data
              :new-data new-data
              :sync-enabled org-supertag-sync--enabled
              :sync-stack org-supertag-sync--state-stack)
        org-supertag-sync--change-log)
  (message "数据变化 - 类型: %S, ID: %S\n旧数据: %S\n新数据: %S"
           type node-id old-data new-data))

(defun org-supertag-sync--verify-data-consistency (node-id)
  "验证节点数据的一致性。"
  (if-let ((db-data (org-supertag-db-get 'nodes node-id)))
      (if-let ((element (save-excursion
                         (org-id-goto node-id)
                         (org-element-at-point))))
          (progn
            (let ((headline (org-element-property :raw-value element))
                  (todo-keyword (org-element-property :todo-keyword element))
                  (actual-headline (if todo-keyword
                                      (concat todo-keyword " " headline)
                                    headline)))
              (message "数据一致性检查:\nDB数据: %S\n实际标题: %S" 
                       db-data actual-headline)
              (should (equal (plist-get db-data :headline) actual-headline)))))))

;; 添加调试辅助函数
(defun org-supertag-sync--debug-buffer-state ()
  "输出当前缓冲区的状态信息。"
  (message "缓冲区状态:\n内容:\n%s\n位置: %d\n主模式: %s"
           (buffer-string)
           (point)
           major-mode))

(provide 'org-supertag-sync)
;;; org-supertag-sync.el ends here 
