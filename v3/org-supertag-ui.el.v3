;;; org-supertag-ui.el --- User interface for org-supertag -*- lexical-binding: t; -*-

;;; Commentary:
;; This file provides the user interface components for org-supertag.

;;; Code:

(require 'org)
(require 'org-supertag-tag)
(require 'org-supertag-field)
(require 'org-supertag-node)

(defgroup org-supertag-ui nil
  "User interface settings for org-supertag."
  :group 'org-supertag
  :prefix "org-supertag-ui-")

(defcustom org-supertag-ui-use-helm (fboundp 'helm)
  "Whether to use helm for completion when available."
  :type 'boolean
  :group 'org-supertag-ui)

(defface org-supertag-tag-face
  '((t :inherit org-tag :weight bold))
  "Face for supertags in org buffers."
  :group 'org-supertag-ui)

(defface org-supertag-field-face
  '((t :inherit org-property-value :slant italic))
  "Face for supertag fields in org buffers."
  :group 'org-supertag-ui)

;;;###autoload
(defun org-supertag-add-tag ()
  "添加或创建标签到当前标题。"
  (interactive)
  (unless (org-at-heading-p)
    (user-error "请在 org 标题上运行此命令"))
  
  (let* ((tags (org-supertag-tag-list))
         (tag-names (mapcar #'org-supertag-tag-name tags))
         (tag-name (completing-read "选择或创建标签: " tag-names nil nil))
         (tag (or (org-supertag-tag-get-by-name tag-name)
                 ;; 如果标签不存在，创建新标签
                 (progn
                   (when (y-or-n-p (format "标签 '%s' 不存在，是否创建？" tag-name))
                     (let ((desc (read-string (format "请输入标签 '%s' 的描述: " tag-name))))
                       (org-supertag-tag-create tag-name :description desc)))))))
    
    (when tag
      (let ((node-id (org-id-get-create)))
        (org-supertag-node-add-tag node-id (org-supertag-tag-id tag))
        (org-supertag-ui-update-current-headline)
        
        ;; 如果是新创建的标签，提示用户添加字段
        (when (and (y-or-n-p "是否要为这个标签添加字段？"))
          (let ((field-name (read-string "字段名称: "))
                (field-type (completing-read "字段类型: "
                                          '("string" "number" "date" "boolean")
                                          nil t))
                (field-desc (read-string "字段描述: ")))
            (let ((field (org-supertag-field-create field-name
                                                  (intern field-type)
                                                  :description field-desc)))
              (org-supertag-tag-add-field (org-supertag-tag-id tag)
                                        (org-supertag-field-id field)))))))))

;;;###autoload
(defun org-supertag-remove-tag ()
  "Remove a supertag from the current headline."
  (interactive)
  (unless (org-at-heading-p)
    (user-error "Please run this command on an org headline"))
  
  (let* ((node-id (org-supertag-node-at-point))
         (tags (org-supertag-node-get-tags node-id))
         (tag-name (completing-read "Remove tag: " 
                                  (mapcar #'org-supertag-tag-name tags)
                                  nil t)))
    (when tag-name
      (let ((tag (org-supertag-tag-get-by-name tag-name)))
        (when tag
          (org-supertag-node-remove-tag node-id (org-supertag-tag-id tag))
          (org-supertag-ui-update-current-headline))))))

;;;###autoload
(defun org-supertag-edit-field ()
  "Edit a field value of the current headline."
  (interactive)
  (unless (org-at-heading-p)
    (user-error "Please run this command on an org headline"))
  
  (let* ((node-id (org-supertag-node-at-point))
         (tags (org-supertag-node-get-tags node-id)))
    (unless tags
      (user-error "No supertags found on this headline"))
    
    (let* ((tag-name (completing-read "Select tag: "
                                    (mapcar #'org-supertag-tag-name tags)
                                    nil t))
           (tag (org-supertag-tag-get-by-name tag-name))
           (fields (org-supertag-tag-get-fields tag)))
      (unless fields
        (user-error "No fields found for tag %s" tag-name))
      
      (let* ((field-name (completing-read "Select field: "
                                        (mapcar #'org-supertag-field-name fields)
                                        nil t))
             (field (org-supertag-field-get-by-name field-name))
             (current-value (org-supertag-field-get-value node-id 
                                                        (org-supertag-tag-id tag)
                                                        field-name))
             (new-value (read-string (format "%s: " field-name)
                                   (or current-value ""))))
        (when (and field new-value)
          (org-supertag-field-set-value node-id
                                       (org-supertag-tag-id tag)
                                       field-name
                                       new-value)
          (org-supertag-ui-update-current-headline))))))

;;;###autoload
(defun org-supertag-view-tags ()
  "View all supertags and their fields on the current headline."
  (interactive)
  (unless (org-at-heading-p)
    (user-error "Please run this command on an org headline"))
  
  (let* ((node-id (org-supertag-node-at-point))
         (tags (org-supertag-node-get-tags node-id)))
    (unless tags
      (user-error "No supertags found on this headline"))
    
    (with-help-window "*Org Supertags*"
      (with-current-buffer standard-output
        (insert "Supertags for: " (org-get-heading t t t t) "\n\n")
        (dolist (tag tags)
          (let ((fields (org-supertag-tag-get-fields tag)))
            (insert (propertize (org-supertag-tag-name tag)
                              'face 'org-supertag-tag-face)
                    "\n")
            (if fields
                (dolist (field fields)
                  (let* ((field-name (org-supertag-field-name field))
                         (value (org-supertag-field-get-value node-id
                                                            (org-supertag-tag-id tag)
                                                            field-name)))
                    (insert "  " field-name ": "
                            (propertize (or value "")
                                      'face 'org-supertag-field-face)
                            "\n")))
              (insert "  No fields\n"))
            (insert "\n")))))))

(defun org-supertag-ui-update-current-headline ()
  "更新当前标题的显示。"
  (save-excursion
    (org-back-to-heading t)
    (let* ((node-id (org-id-get))
           (tag-rels (org-supertag-node-get-tags node-id)))
      (message "[DEBUG UI] 当前节点 ID: %s" node-id)
      (message "[DEBUG UI] 获取到的标签关系: %S" tag-rels)
      (let* ((tags (mapcar (lambda (tag)
                            (let ((tag-name (org-supertag-tag-name tag)))
                              (message "[DEBUG UI] 处理标签: %S, 名称: %s" tag tag-name)
                              tag-name))
                          tag-rels))
             (inhibit-read-only t))
        (message "[DEBUG UI] 最终标签列表: %S" tags)
        (org-set-tags tags)))))

(defun org-supertag-ui-tag-list ()
  "显示所有标签的列表。"
  (interactive)
  (let ((buffer (get-buffer-create "*Org SuperTag Tags*")))
    (with-current-buffer buffer
      (let ((inhibit-read-only t))
        (erase-buffer)
        (org-mode)
        (insert "* 标签列表\n\n")
        ;; 获取所有标签并排序
        (let ((tags (sort (org-supertag-tag-list)
                         (lambda (a b)
                           (string< (org-supertag-tag-name a)
                                  (org-supertag-tag-name b))))))
          (dolist (tag tags)
            (insert "- "
                    (propertize (org-supertag-tag-name tag)
                              'face 'org-supertag-tag-face))
            (when-let ((desc (org-supertag-tag-description tag)))
              (insert " :: " desc))
            (insert "\n")))
        (goto-char (point-min))
        (setq buffer-read-only t)))
    (pop-to-buffer buffer)))

(defun org-supertag-ui-tag-info (tag-id)
  "显示标签的详细信息。
TAG-ID 是要显示的标签ID。"
  (interactive (list (let* ((tags (org-supertag-tag-list))
                           (tag-name (completing-read "选择标签: "
                                                    (mapcar #'org-supertag-tag-name tags)
                                                    nil t)))
                      (org-supertag-tag-id (org-supertag-tag-get-by-name tag-name)))))
  
  (let* ((tag-plist (org-supertag-db-get 'tags tag-id))  ; 获取 plist
         (tag (when tag-plist  ; 转换为结构体
                (org-supertag-tag--from-plist tag-plist)))
         (buffer (get-buffer-create "*Org SuperTag Tag Info*")))
    
    (unless tag
      (error "标签 '%s' 不存在" (or tag-id "")))
    
    (with-current-buffer buffer
      (let ((inhibit-read-only t))
        (erase-buffer)
        (org-mode)
        ;; 显示标签基本信息
        (insert "* "
                (propertize (or (org-supertag-tag-name tag) "")
                          'face 'org-supertag-tag-face)
                "\n\n")
        
        ;; 显示标签描述
        (when-let ((desc (org-supertag-tag-description tag)))
          (insert "** 描述\n" desc "\n\n"))
        
        ;; 显示标签字段
        (let ((fields (org-supertag-tag-get-fields tag)))
          (if fields
              (progn
                (insert "** 字段\n")
                (dolist (field fields)
                  (insert "- "
                          (propertize (or (org-supertag-field-name field) "")
                                    'face 'org-supertag-field-face))
                  (when-let ((desc (org-supertag-field-description field)))
                    (insert " :: " desc))
                  (insert "\n")))
            (insert "** 字段\n无字段\n")))
        
        ;; 显示所有者标签（如果有）
        (when-let ((owner-id (org-supertag-tag-owner-id tag))
                  (owner (org-supertag-tag-get owner-id)))
          (insert "\n** 所有者标签\n"
                  (propertize (or (org-supertag-tag-name owner) "")
                            'face 'org-supertag-tag-face)
                  "\n"))
        
        ;; 显示子标签
        (let ((children (org-supertag-tag-get-children tag-id)))
          (when children
            (insert "\n** 子标签\n")
            (dolist (child children)
              (insert "- "
                      (propertize (or (org-supertag-tag-name child) "")
                                'face 'org-supertag-tag-face)
                      "\n"))))
        
        (goto-char (point-min))
        (setq buffer-read-only t)))
    
    (pop-to-buffer buffer)))

(defun org-supertag-ui-node-info ()
  "显示当前节点的详细信息。"
  (interactive)
  (unless (org-at-heading-p)
    (user-error "请在 org 标题上运行此命令"))
  
  (let* ((node-id (org-id-get-create))
         (heading (or (org-get-heading t t t t) "Untitled"))
         (buffer (get-buffer-create "*Org SuperTag Node Info*")))
    (with-current-buffer buffer
      (let ((inhibit-read-only t))
        (erase-buffer)
        (org-mode)
        ;; 显示节点基本信息
        (insert "* "
                (propertize heading
                          'face 'org-level-1)
                "\n\n")
        
        ;; 显示节点ID
        (insert "** ID\n"
                (or node-id "")
                "\n\n")
        
        ;; 显示标签和字段
        (let ((tags (org-supertag-node-get-tags node-id)))
          (if tags
              (progn
                (insert "** 标签\n")
                (dolist (tag tags)
                  ;; 显示标签名称
                  (insert "*** "
                          (propertize (or (org-supertag-tag-name tag) "")
                                    'face 'org-supertag-tag-face)
                          "\n")
                  ;; 显示标签字段
                  (let ((fields (org-supertag-tag-get-fields tag)))
                    (when fields
                      (dolist (field fields)
                        (let* ((field-name (or (org-supertag-field-name field) ""))
                               (value (org-supertag-field-get-value 
                                      node-id
                                      (org-supertag-tag-id tag)
                                      field-name)))
                          (insert "    - "
                                  (propertize field-name
                                            'face 'org-supertag-field-face)
                                  ": "
                                  (or value "")
                                  "\n")))))))
            (insert "** 标签\n无标签\n")))
        
        (goto-char (point-min))
        (setq buffer-read-only t)))
    
    (pop-to-buffer buffer)))

(defun org-supertag-ui-field-list ()
  "显示所有字段的列表。"
  (interactive)
  (let ((buffer (get-buffer-create "*Org SuperTag Fields*")))
    (with-current-buffer buffer
      (let ((inhibit-read-only t))
        (erase-buffer)
        (org-mode)
        (insert "* 字段列表\n\n")
        ;; 获取所有字段并排序
        (let ((fields (sort (org-supertag-field-list)
                           (lambda (a b)
                             (string< (org-supertag-field-name a)
                                    (org-supertag-field-name b))))))
          (dolist (field fields)
            (insert "- "
                    (propertize (org-supertag-field-name field)
                              'face 'org-supertag-field-face)
                    " ("
                    (symbol-name (org-supertag-field-type field))
                    ")")
            (when-let ((desc (org-supertag-field-description field)))
              (insert " :: " desc))
            (insert "\n")))
        (goto-char (point-min))
        (setq buffer-read-only t)))
    (pop-to-buffer buffer)))

;;----------------------------------------------------------------------
;; 辅助函数
;;----------------------------------------------------------------------
(defun org-supertag-ui-update-current-headline ()
  "Update the display of the current headline."
  (save-excursion
    (org-back-to-heading t)
    (let ((inhibit-read-only t))
      (org-set-tags (org-get-tags nil t)))))

;;----------------------------------------------------------------------
;; 初始化和清理
;;----------------------------------------------------------------------

(defun org-supertag-ui-init ()
  "Initialize the org-supertag user interface."
  ;; Add key bindings
  (define-key org-mode-map (kbd "C-c s t") #'org-supertag-add-tag)
  (define-key org-mode-map (kbd "C-c s r") #'org-supertag-remove-tag)
  (define-key org-mode-map (kbd "C-c s e") #'org-supertag-edit-field)
  (define-key org-mode-map (kbd "C-c s v") #'org-supertag-view-tags))

(defun org-supertag-ui-cleanup ()
  "清理用户界面。"
  (message "\n=== 清理用户界面 ===")
  ;; 关闭所有 UI buffer
  (dolist (buffer-name '("*Org SuperTag Tags*"
                         "*Org SuperTag Fields*"
                         "*Org SuperTag Node Info*"
                         "*Org SuperTag Tag Info*"))
    (when-let ((buffer (get-buffer buffer-name)))
      (kill-buffer buffer)))
  ;; 移除键盘绑定
  (when (boundp 'org-mode-map)
    (define-key org-mode-map (kbd "C-c t") nil))
  (message "用户界面清理完成"))



(provide 'org-supertag-ui)
;;; org-supertag-ui.el ends here 