;;; org-supertag-field.el --- Field management for org-supertag -*- lexical-binding: t; -*-

;;; Commentary:
;; 管理 org-supertag 的字段系统。主要职责:
;; 1. 字段的定义和类型系统
;; 2. 字段值的验证和格式化
;; 3. 字段模板管理

(require 'org)
(require 'org-supertag-db)
;;; Code:

;;----------------------------------------------------------------------
;; 字段类型系统
;;----------------------------------------------------------------------


(defun org-supertag-field-type-make (&rest props)
  "创建字段类型信息。
支持的属性：
:id         - 类型ID
:name       - 类型名称
:validator  - 验证函数
:formatter  - 格式化函数
:description - 类型描述
:metadata   - 元数据"
  (apply #'make-org-supertag-field-type props))

(defvar org-supertag-field-types
  (list (cons 'string (org-supertag-field-type-make
                       :id "field-type-string"
                       :name 'string
                       :validator #'stringp
                       :formatter #'identity
                       :description "文本"
                       :metadata nil))
        (cons 'number (org-supertag-field-type-make
                      :id "field-type-number"
                      :name 'number
                      :validator #'numberp
                      :formatter #'number-to-string
                      :description "数字"
                      :metadata nil))
        (cons 'date (org-supertag-field-type-make
                    :id "field-type-date"
                    :name 'date
                    :validator #'org-supertag-field--validate-date
                    :formatter #'identity
                    :description "日期"
                    :metadata nil))
        (cons 'boolean (org-supertag-field-type-make
                       :id "field-type-boolean"
                       :name 'boolean
                       :validator #'org-supertag-field-validator-boolean
                       :formatter #'identity
                       :description "布尔值"
                       :metadata nil)))
  "预定义的字段类型。")

;; 更新获取字段类型信息的函数
(defun org-supertag-field-type-get (type)
  "获取字段类型的定义。"
  (or (org-supertag-db-get-field-type-by-name type)
      (alist-get type org-supertag-field-types)))

(defun org-supertag-field-type-validator (type)
  "获取字段类型的验证器。"
  (when-let ((type-info (org-supertag-field-type-get type)))
    (org-supertag-field-type-validator type-info)))

(defun org-supertag-field-type-formatter (type)
  "获取字段类型的格式化器。"
  (when-let ((type-info (org-supertag-field-type-get type)))
    (org-supertag-field-type-formatter type-info)))

(defun org-supertag-field-type-description (type)
  "获取字段类型的描述。"
  (when-let ((type-info (org-supertag-field-type-get type)))
    (org-supertag-field-type-description type-info)))

;;----------------------------------------------------------------------
;; 核心操作
;;----------------------------------------------------------------------

(defun org-supertag-field--generate-id ()
  "生成唯一的字段ID。"
  (format "field-%s" (org-id-uuid)))

(defun org-supertag-make-field (name type &rest props)
  "创建新字段。
NAME 是字段名称。
TYPE 是字段类型。
PROPS 是属性列表，可包含 :default, :constraints, :triggers, :ai-prompt 等。"
  (apply #'org-supertag-field-create name type props))

(defun org-supertag-field-create (name type &rest props)
  "创建新字段。
NAME 是字段名称。
TYPE 是字段类型。
PROPS 是属性列表，可包含 :description, :default, :constraints, :triggers, :ai-prompt 等。"
  (message "[DEBUG Field] 创建字段 - Name: %S, Type: %S, Props: %S" name type props)
  (unless (org-supertag-field--validate-name name)
    (error "Invalid field name: %s. Field names must not contain spaces and can only include letters, numbers, hyphens and underscores" name))
  
  ;; 确保类型是符号
  (let ((type-sym (if (stringp type)
                     (intern type)
                   type)))
    (message "[DEBUG Field] 处理后的类型: %S" type-sym)
    ;; 生成唯一ID
    (let ((id (org-supertag-field--generate-id)))
      (message "[DEBUG Field] 生成的字段ID: %s" id)
      ;; 使用数据库 API 创建字段
      (let* ((allowed-props '(:description :default :constraints :triggers :ai-prompt :metadata))
             (filtered-props (cl-loop for (key value) on props by #'cddr
                                    when (memq key allowed-props)
                                    collect key
                                    and collect value))
             (field-data (append
                         (list :id id
                               :name name
                               :type type-sym
                               :description (or (plist-get props :description)
                                              (format "Field %s of type %s" name type-sym)))
                         filtered-props
                         `(:created-at ,(current-time)))))
        (message "[DEBUG Field] 创建字段数据: %S" field-data)
        (org-supertag-db-create 'fields field-data)
        
        ;; 返回字段结构体
        (let ((field (org-supertag-field-get id)))
          (message "[DEBUG Field] 返回的字段结构体: %S" field)
          field)))))

(defun org-supertag-field-get (id)
  "获取字段。"
  (message "[DEBUG Field] 获取字段 - ID: %s" id)
  (when-let* ((field-data (org-supertag-db-get 'fields id)))
    (message "[DEBUG Field] 获取到的字段数据: %S" field-data)
    (let ((field (make-org-supertag-field
                 :id id
                 :name (plist-get field-data :name)
                 :type (plist-get field-data :type)
                 :default (plist-get field-data :default)
                 :constraints (plist-get field-data :constraints)
                 :triggers (plist-get field-data :triggers)
                 :ai-prompt (plist-get field-data :ai-prompt)
                 :metadata (plist-get field-data :metadata))))
      (message "[DEBUG Field] 创建的字段结构体: %S" field)
      field)))

(defun org-supertag-field-delete (id)
  "删除字段。"
  ;; 使用数据库 API 删除字段
  (org-supertag-db-delete 'fields id))

(defun org-supertag-field-get-id (field)
  "Get the ID of a field.
FIELD can be either a field object or a field ID string."
  (if (stringp field)
      field
    (org-supertag-field-id field)))

(defun org-supertag-field-get-type (field)
  "Get the type of FIELD."
  (if (org-supertag-field-p field)
      (org-supertag-field-type field)
    (when-let* ((field-data (org-supertag-db-get 'fields field)))
      (plist-get field-data :type))))  

(defun org-supertag-field-get-description (field)
  "获取字段的描述信息。
FIELD 可以是字段ID或字段结构体。"
  (let ((field-struct (if (org-supertag-field-p field)
                         field
                       (org-supertag-field-get field))))
    (when field-struct
      (or (org-supertag-field-description field-struct)
          (format "Field %s of type %s"
                  (org-supertag-field-name field-struct)
                  (org-supertag-field-type field-struct))))))

;;----------------------------------------------------------------------
;; 验证和格式化
;;----------------------------------------------------------------------

(defun org-supertag-field--validate-date (value)
  "验证日期格式。
VALUE 必须是 'YYYY-MM-DD' 格式的字符串。
例如：'2023-12-31' 是有效的，而 '31-12-2023' 是无效的。"
  (and (stringp value)
       (string-match-p "^[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}$" value)
       (condition-case nil
           (let* ((parts (split-string value "-"))
                  (year (string-to-number (nth 0 parts)))
                  (month (string-to-number (nth 1 parts)))
                  (day (string-to-number (nth 2 parts))))
             (and (>= year 1900) (<= year 9999)  ; 合理的年份范围
                  (>= month 1) (<= month 12)      ; 有效的月份
                  (>= day 1) (<= day 31)          ; 有效的日期
                  t))
         (error nil))))

(defun org-supertag-field--validate-name (name)
  "验证字段名称是否合法。
NAME 是字段名称。
字段名称必须满足以下条件：
1. 不能包含空格
2. 只能包含字母、数字、连字符和下划线
3. 不能为空"
  (and (stringp name)
       (not (string-empty-p name))
       (not (string-match-p "\\s-" name))
       (string-match-p "^[a-zA-Z0-9_-]+$" name)))

;;; 字段验证器组件

(defun org-supertag-field-validator-string (value &optional constraints)
  "验证字符串类型字段。"
  (and (stringp value)
       (if-let ((max-length (plist-get constraints :max-length)))
           (<= (length value) max-length)
         t)))

(defun org-supertag-field-validator-number (value &optional constraints)
  "验证数字类型字段。"
  (and (numberp value)
       (if-let ((min (plist-get constraints :min)))
           (>= value min)
         t)
       (if-let ((max (plist-get constraints :max)))
           (<= value max)
         t)))

(defun org-supertag-field-validator-date (value &optional _constraints)
  "验证日期类型字段。"
  (and (stringp value)
       (condition-case nil
           (let ((date-format "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}"))
             (and (string-match-p (concat "^" date-format "$") value)
                  (parse-iso8601-time-string (concat value "T00:00:00Z"))
                  t))
         (error nil))))

(defun org-supertag-field-validator-boolean (value &optional _constraints)
  "验证布尔类型字段。"
  (or (memq value '(t nil))
      (and (stringp value)
           (member (downcase value) '("true" "false" "yes" "no" "1" "0")))))

;;; 验证器注册表

(defvar org-supertag-field-validators
  (list (cons 'string #'org-supertag-field-validator-string)
        (cons 'number #'org-supertag-field-validator-number)
        (cons 'date   #'org-supertag-field-validator-date)
        (cons 'boolean #'org-supertag-field-validator-boolean))
  "字段验证器注册表。")

(defun org-supertag-field-register-validator (type validator)
  "注册新的字段验证器。
TYPE 是字段类型（符号）。
VALIDATOR 是验证函数。"
  (setf (alist-get type org-supertag-field-validators) validator))

;;; 主验证函数

(defun org-supertag-field-validate (field value)
  "验证字段值。
FIELD 是字段对象。
VALUE 是要验证的值。"
  (when-let* ((type (org-supertag-field-type field))
              (validator (org-supertag-field-type-validator type)))
    (funcall validator value)))

(defun org-supertag-field-format (field value)
  "格式化字段值。"
  (when-let* ((type (org-supertag-field-type field))
              (formatter (org-supertag-field-type-formatter type)))
    (funcall formatter value)))

(defun org-supertag-field--format-value (field value)
  "Format VALUE according to FIELD's type specification.
Ensure the value matches the field's type constraints."
  (let* ((type (org-supertag-field-get-type field))
         (formatted-value
          (pcase type
            ('string (if (stringp value) value (format "%s" value)))
            ('number (cond
                     ((numberp value) value)
                     ((stringp value) (string-to-number value))
                     (t (error "Cannot convert %S to number" value))))
            ('date (cond
                   ((stringp value) value)
                   (t (format-time-string "%Y-%m-%d" value))))
            ('boolean (cond
                      ((eq value t) "true")
                      ((eq value nil) "false")
                      ((stringp value) (if (member (downcase value) '("true" "t" "yes" "1")) "true" "false"))
                      (t "false")))
            (_ (error "Unsupported field type: %S" type)))))
    (message "[DEBUG Field] Formatting value %S of type %S to: %S" value type formatted-value)
    formatted-value))

(defun org-supertag-field--set-node-property (node-id field value)
  "Set property for NODE-ID using FIELD's specification with VALUE.
Ensures proper type conversion and validation."
  (let* ((field-name (org-supertag-field-get-name field))
         (formatted-value (org-supertag-field--format-value field value)))
    (message "[DEBUG Field] Setting property - Node: %s, Field: %s, Value: %S" 
             node-id field-name formatted-value)
    (when-let ((node (org-supertag-node-get node-id)))
      (with-current-buffer (find-file-noselect (org-supertag-node-file node))
        (save-excursion
          (goto-char (org-supertag-node-point node))
          (org-entry-put (point) field-name formatted-value))))))

(defun org-supertag-field--get-node-property (node-id field)
  "Get property value for NODE-ID using FIELD's specification.
Handles type conversion and validation."
  (let* ((field-name (org-supertag-field-get-name field))
         (raw-value (when-let ((node (org-supertag-node-get node-id)))
                     (with-current-buffer (find-file-noselect (org-supertag-node-file node))
                       (save-excursion
                         (goto-char (org-supertag-node-point node))
                         (org-entry-get (point) field-name))))))
    (when raw-value
      (org-supertag-field--format-value field raw-value))))

;;----------------------------------------------------------------------
;; 初始化
;;----------------------------------------------------------------------

(defun org-supertag-field-init ()
  "初始化字段系统。"
  (message "\n=== 初始化字段系统 ===")
  ;; 确保数据库已初始化
  (org-supertag-db-init)
  
  ;; 注册字段存储
  (unless (org-supertag-db-get-store 'fields)
    (org-supertag-db-register-store 'fields))
  
  ;; 注册字段类型存储
  (unless (org-supertag-db-get-store 'field-types)
    (org-supertag-db-register-store 'field-types))
  
  ;; 初始化预定义字段类型
  (dolist (type-def org-supertag-field-types)
    (let* ((type-name (car type-def))
           (type-info (cdr type-def)))
      (unless (org-supertag-db-get-field-type-by-name type-name)
        (org-supertag-db-create-field-type
         type-name
         :validator (org-supertag-field-type-validator type-info)
         :formatter (org-supertag-field-type-formatter type-info)
         :description (org-supertag-field-type-description type-info))))))

;;----------------------------------------------------------------------
;; 字段关系管理
;;----------------------------------------------------------------------

(defun org-supertag-field-add-to-tag (field-id tag-id &optional default-value)
  "将字段添加到标签。"
  (when (and (org-supertag-field-get field-id)
             (org-supertag-tag-get tag-id))
    (org-supertag-db-create-relation 'tag-field-rels tag-id field-id 
                                    (when default-value 
                                      (list :value default-value)))))

(defun org-supertag-field-remove-from-tag (field-id tag-id)
  "从标签中移除字段。"
  (org-supertag-db-delete 'tag-field-rels
                         (format "%s-%s" tag-id field-id)))

(defun org-supertag-field-add-to-node (field-id node-id &optional value)
  "将字段添加到节点。"
  (when (and (org-supertag-field-get field-id)
             (org-supertag-node-get node-id))
    (org-supertag-db-create-relation 'node-field-rels node-id field-id
                                    (when value 
                                      (list :value value)))))

(defun org-supertag-field-remove-from-node (field-id node-id)
  "从节点中移除字段。"
  (org-supertag-db-delete 'node-field-rels
                         (format "%s-%s" node-id field-id)))

;;----------------------------------------------------------------------
;; 字段值管理
;;----------------------------------------------------------------------

(defun org-supertag-field-get-value (field-id node-id)
  "获取节点的字段值。"
  (message "获取字段值 - Field ID: %s, Node ID: %s" field-id node-id)
  (let* ((rel-id (format "%s-%s" node-id field-id))
         (store (org-supertag-db-get-store 'node-field-rels))
         (rel (gethash rel-id store)))
    (message "查找关系 - Store: %S" store)
    (message "关系ID: %s, 找到的关系: %S" rel-id rel)
    (when rel
      (let ((value (org-supertag-node-field-rel-value rel)))
        (message "获取到的值: %S" value)
        value))))

(defun org-supertag-field-set-value (field-id node-id value)
  "设置节点的字段值。"
  (message "设置字段值 - Field ID: %s, Node ID: %s, Value: %S" field-id node-id value)
  (when-let ((field (org-supertag-field-get field-id)))
    (message "找到字段: %S" field)
    (if (org-supertag-field-validate field value)
        (let ((formatted-value (org-supertag-field-format field value)))
          (message "字段值验证通过，格式化后的值: %S" formatted-value)
          (org-supertag-field-add-to-node field-id node-id formatted-value))
      (message "字段值验证失败: %S" value))))

(defun org-supertag-field-get-inherited-value (field-id node-id)
  "获取字段继承值。
FIELD-ID 是字段ID。
NODE-ID 是节点ID。"
  (message "[DEBUG Field] Getting inherited value - Field: %s, Node: %s"
           field-id node-id)
  
  ;; 首先尝试获取节点自身的值
  (let ((node-value (org-supertag-field-get-value field-id node-id)))
    (if node-value
        (progn 
          (message "[DEBUG Field] Found node value: %s" node-value)
          node-value)
      ;; 如果节点没有值，尝试从标签获取
      (let ((node-tags (org-supertag-node-get-tags node-id)))
        (message "[DEBUG Field] Node tags: %S" node-tags)
        (catch 'found
          (dolist (tag-id node-tags)
            (message "[DEBUG Field] Checking tag: %s" tag-id)
            (when-let* ((rel (org-supertag-db-get 'tag-field-rels 
                                               (format "%s-%s" tag-id field-id)))
                       (value (org-supertag-tag-field-rel-default-value rel)))
              (message "[DEBUG Field] Found inherited value from tag %s: %s" 
                      tag-id value)
              (throw 'found value))))))))

(defun org-supertag-field-get-all-values (node-id)
  "获取节点的所有字段值。"
  (let ((values '()))
    ;; 获取直接字段值
    (dolist (rel (org-supertag-db-get-node-fields node-id))
      (push (cons (org-supertag-node-field-rel-field-id rel)
                 (org-supertag-node-field-rel-value rel))
            values))
    
    ;; 获取通过标签继承的字段值
    (dolist (tag-id (org-supertag-db-get-node-tags node-id))
      (dolist (rel (org-supertag-db-get-tag-fields tag-id))
        (let ((field-id (org-supertag-tag-field-rel-field-id rel)))
          (unless (assoc field-id values)
            (push (cons field-id 
                       (org-supertag-tag-field-rel-default-value rel))
                  values)))))
    
    (nreverse values)))

;;----------------------------------------------------------------------
;; 查询和工具函数
;;----------------------------------------------------------------------

(defun org-supertag-field--from-plist (plist)
  "将属性列表转换为字段结构体。
PLIST 是包含字段属性的列表。"
  (make-org-supertag-field
   :id (plist-get plist :id)
   :name (plist-get plist :name)
   :type (plist-get plist :type)
   :default (plist-get plist :default)
   :constraints (plist-get plist :constraints)
   :triggers (plist-get plist :triggers)
   :ai-prompt (plist-get plist :ai-prompt)
   :metadata (plist-get plist :metadata)
   :description (plist-get plist :description)))

(defun org-supertag-field-list ()
  "返回所有已定义的字段列表。"
  (let ((fields nil))
    (when-let ((store (org-supertag-db-get-store 'fields)))
      (maphash (lambda (_id field-plist)
                 ;; 将 plist 转换为 org-supertag-field 结构体
                 (push (org-supertag-field--from-plist field-plist) fields))
               store))
    fields))

(defun org-supertag-field-info (field-id)
  "显示字段详细信息。"
  (interactive "sField ID: ")
  (if-let ((field (org-supertag-field-get field-id)))
      (message "字段信息:
ID: %s
名称: %s
类型: %s
默认值: %s
创建时间: %s"
              (org-supertag-field-id field)
              (org-supertag-field-get-name field)
              (org-supertag-field-type field)
              (or (org-supertag-field-default field) "无")
              (format-time-string
               "%Y-%m-%d %H:%M:%S"
               (plist-get (org-supertag-field-metadata field) :created-at)))
    (message "字段不存在: %s" field-id)))

(defun org-supertag-field-get-by-name (name)
  "通过名称查找字段。"
  (car (org-supertag-db-query 'fields
                             (lambda (field)
                               (equal (org-supertag-field-get-name field) name)))))

(defun org-supertag-field-get-name (field)
  "获取字段名称。
FIELD 可以是字段对象或字段 ID。"
  (if (stringp field)
      (org-supertag-field-get-name (org-supertag-field-get field))
    (if (org-supertag-field-p field)
        (org-supertag-field-name field)
      field)))

(defalias 'org-supertag-field-name 'org-supertag-field-get-name
  "保持向后兼容性。")

(defun org-supertag-field-p (obj)
  "判断是否为字段结构体。"
  (cl-typep obj 'org-supertag-field))

;;----------------------------------------------------------------------
;; 调试和测试工具
;;----------------------------------------------------------------------

(defun org-supertag-field-debug ()
  "调试字段系统。"
  (interactive)
  (message "\n=== 字段系统调试 ===")
  (let ((fields (org-supertag-db-query 'fields #'identity)))
    (message "字段总数: %d" (length fields))
    (dolist (field fields)
      (message "字段: %s (%s)"
               (org-supertag-field-get-name field)
               (org-supertag-field-id field)))))

(defun org-supertag-field-test ()
  "测试字段系统。"
  (interactive)
  (message "\n=== 字段系统测试 ===")
  ;; 创建测试字段
  (let ((field (org-supertag-make-field "test-field" 'string
                                         :default "test value")))
    (message "创建的字段: %S" field)
    ;; 测试验证
    (message "验证测试:")
    (message "  字符串值: %s" 
             (org-supertag-field-validate field "test"))
    (message "  数字值: %s"
             (org-supertag-field-validate field 123))
    ;; 删除测试字段
    (org-supertag-field-delete (org-supertag-field-id field))
    (message "删除字段后:")
    (org-supertag-field-info (org-supertag-field-id field))))

(defun org-supertag-field-cleanup ()
  "清理字段系统。"
  (message "\n=== 清理字段系统 ===")
  ;; 清理字段数据
  (when-let ((store (org-supertag-db-get-store 'fields)))
    (clrhash store))
  (when-let ((store (org-supertag-db-get-store 'field-types)))
    (clrhash store))
  (message "字段系统清理完成"))



(provide 'org-supertag-field)
;;; org-supertag-field.el ends here
