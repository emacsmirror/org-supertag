;;; org-supertag-node.el --- Node management for org-supertag -*- lexical-binding: t; -*-

;;; Commentary:
;; 管理 org-supertag 的节点系统。主要职责:
;; 1. 节点的创建和管理
;; 2. 节点与标签的关联
;; 3. 节点属性的管理
;; 4. 与 org-mode 的同步

(require 'org)
(require 'org-id)
(require 'cl-lib)

;;----------------------------------------------------------------------
;; 变量定义
;;----------------------------------------------------------------------

(defvar org-supertag-node-tags (make-hash-table :test 'equal)
  "存储节点到标签的映射。
键是节点 ID，值是标签 ID 列表。")

(defvar org-supertag-tag-nodes (make-hash-table :test 'equal)
  "存储标签到节点的映射。
键是标签 ID，值是节点 ID 列表。")

;;----------------------------------------------------------------------
;; 关联管理
;;----------------------------------------------------------------------

(defun org-supertag-node--add-tag-association (node-id tag-id)
  "添加节点和标签的关联。"
  ;; 更新节点到标签的映射
  (let ((node-tags (gethash node-id org-supertag-node-tags)))
    (unless (member tag-id node-tags)
      (puthash node-id (cons tag-id node-tags) org-supertag-node-tags)))
  
  ;; 更新标签到节点的映射
  (let ((tag-nodes (gethash tag-id org-supertag-tag-nodes)))
    (unless (member node-id tag-nodes)
      (puthash tag-id (cons node-id tag-nodes) org-supertag-tag-nodes))))

(defun org-supertag-node--remove-tag-association (node-id tag-id)
  "移除节点和标签的关联。"
  ;; 更新节点到标签的映射
  (let ((node-tags (gethash node-id org-supertag-node-tags)))
    (when (member tag-id node-tags)
      (puthash node-id (delete tag-id node-tags) org-supertag-node-tags)))
  
  ;; 更新标签到节点的映射
  (let ((tag-nodes (gethash tag-id org-supertag-tag-nodes)))
    (when (member node-id tag-nodes)
      (puthash tag-id (delete node-id tag-nodes) org-supertag-tag-nodes))))

;;----------------------------------------------------------------------
;; 查询函数
;;----------------------------------------------------------------------

(defun org-supertag-node-get-tags (node-id)
  "获取节点的所有标签。"
  (message "[DEBUG Node] 获取标签 - Node ID: %s" node-id)
  (let ((tags nil))
    (when-let ((store (org-supertag-db-get-store 'node-tag-rels)))
      (message "[DEBUG Node] 标签关系存储: %S" store)
      (maphash (lambda (rel-id rel)
                 (message "[DEBUG Node] 检查关系: %s -> %S" rel-id rel)
                 (when (and (stringp rel-id)
                           (equal (plist-get rel :node-id) node-id))
                   (when-let* ((tag-id (plist-get rel :tag-id))
                              (tag (org-supertag-tag-get tag-id)))
                     (message "[DEBUG Node] 找到标签: %S" tag)
                     (push tag tags))))
               store))
    (message "[DEBUG Node] 返回标签: %S" tags)
    (nreverse tags)))

(defun org-supertag-tag-get-nodes (tag-id)
  "获取标签关联的所有节点ID。"
  (gethash tag-id org-supertag-tag-nodes))

;;----------------------------------------------------------------------
;; 节点操作
;;----------------------------------------------------------------------

(defun org-supertag-node-create (name &optional tags properties)
  "创建新节点。"
  (let* ((id (format "node-%s" (org-id-uuid)))
         (file-path (or (buffer-file-name) ""))
         (node (make-org-supertag-node
                :id id
                :name name
                :file-path file-path
                :point (point)
                :level (org-current-level)
                :parent-id (org-id-get-with-outline-path-completion))))
    
    (message "创建节点 - ID: %s, Name: %s" id name)
    
    ;; Add additional properties to metadata
    (when properties
      (setf (org-supertag-node-metadata node) properties))
    
    ;; 存储节点
    (let ((store (org-supertag-db-get-store 'nodes)))
      (message "存储节点 - Store: %S" store)
      ;; Convert to plist for storage
      (let ((node-plist (list :id id
                             :name (org-supertag-node-name node)
                             :file (org-supertag-node-file-path node)
                             :point (org-supertag-node-point node)
                             :level (org-supertag-node-level node)
                             :parent-id (org-supertag-node-parent-id node)
                             :metadata (org-supertag-node-metadata node))))
        (puthash id node-plist store)
        (message "验证节点存储 - 已存储的节点: %S" (gethash id store))))
    
    ;; 创建标签关联
    (when tags
      (dolist (tag-id tags)
        (org-supertag-node-add-tag id tag-id)))
    
    ;; 返回节点ID
    id))

(defun org-supertag-node-get (id)
  "获取节点。"
  (message "获取节点 - ID: %s" id)
  (let* ((store (org-supertag-db-get-store 'nodes))
         (node-plist (gethash id store)))
    (message "节点存储: %S" store)
    (message "找到的节点: %S" node-plist)
    ;; Convert plist to struct if needed
    (when node-plist
      (make-org-supertag-node
       :id (plist-get node-plist :id)
       :name (plist-get node-plist :name)
       :file-path (plist-get node-plist :file)
       :point (plist-get node-plist :point)
       :level (plist-get node-plist :level)
       :parent-id (plist-get node-plist :parent-id)
       :metadata (plist-get node-plist :metadata)))))

(defun org-supertag-node-get-name (node-or-id)
  "获取节点名称。"
  (let ((node (if (stringp node-or-id)
                  (org-supertag-node-get node-or-id)
                node-or-id)))
    (when node
      (plist-get node :name))))

(defun org-supertag-node-set-name (node-id new-name)
  "设置节点名称。"
  (when-let ((node (org-supertag-node-get node-id)))
    (setf (plist-get node :name) new-name)
    (let ((store (org-supertag-db-get-store 'nodes)))
      (puthash node-id node store))
    new-name))

(defun org-supertag-node-delete (id)
  "删除节点。"
  (when-let ((node (org-supertag-node-get id)))
    ;; 删除所有关联
    (dolist (rel (org-supertag-db-get-node-tags id))
      (org-supertag-db-delete 'node-tag-rels 
                             (format "%s-%s" id (org-supertag-node-tag-rel-tag-id rel))))
    
    ;; 删除节点
    (org-supertag-db-delete 'nodes id)))

;;----------------------------------------------------------------------
;; 标签管理
;;----------------------------------------------------------------------
(defun org-supertag-node-add-tag (node-id tag-id)
  "为节点添加标签。"
  (message "[DEBUG Node] Adding tag %s to node %s" tag-id node-id)
  
  ;; Create node-tag relationship
  (let ((rel-id (format "%s-%s" node-id tag-id)))
    (message "[DEBUG Node] Creating relationship with ID: %s" rel-id)
    (org-supertag-db-create 'node-tag-rels
                           (list :id rel-id
                                :node-id node-id
                                :tag-id tag-id)))
  
  ;; Initialize fields
  (org-supertag-node--init-tag-fields node-id tag-id)
  
  ;; Update org headline tags
  (org-supertag-ui-update-current-headline))

(defun org-supertag-node-remove-tag (node-id tag-id)
  "从节点移除标签。"
  ;; 删除标签关联
  (org-supertag-db-delete 'node-tag-rels 
                         (format "%s-%s" node-id tag-id))
  
  ;; 删除相关字段值
  (dolist (field-rel (org-supertag-db-get-tag-fields tag-id))
    (let ((field-id (org-supertag-tag-field-rel-field-id field-rel)))
      (org-supertag-db-delete 'node-field-rels
                             (format "%s-%s" node-id field-id)))))

;;----------------------------------------------------------------------
;; 属性管理
;;----------------------------------------------------------------------

(defun org-supertag-node-get-property (node-id field-name)
  "获取节点的字段属性值。"
  ;; 先查找直接绑定的字段
  (when-let ((rel (org-supertag-db-get 'node-field-rels
                                      (format "%s-%s" node-id field-name))))
    (org-supertag-node-field-rel-value rel))
  
  ;; 如果没有直接绑定，查找通过标签继承的字段
  (let ((tag-rels (org-supertag-db-get-node-tags node-id)))
    (catch 'found
      (dolist (tag-rel tag-rels)
        (let* ((tag-id (org-supertag-node-tag-rel-tag-id tag-rel))
               (field-rel (org-supertag-db-get 'tag-field-rels
                                             (format "%s-%s" tag-id field-name))))
          (when field-rel
            (throw 'found (org-supertag-tag-field-rel-default-value field-rel))))))))

(defun org-supertag-node-set-property (node-id field-name value)
  "设置节点属性。"
  ;; 确保字段存在
  (unless (org-supertag-db-get 'fields field-name)
    (error "Field not found: %s" field-name))
  
  ;; 设置字段值
  (org-supertag-db-add-relation 'node-field node-id field-name value)
  
  ;; 同步到 org 文件
  (when-let ((marker (org-id-find node-id t)))
    (org-with-point-at marker
      (org-entry-put nil 
                     (upcase (symbol-name field-name))
                     (format "%s" value)))))

(defun org-supertag-node-get-field-value (node-id field-id)
  "获取节点的字段值。
NODE-ID 是节点的 ID。
FIELD-ID 是字段的 ID。
如果字段值不存在，返回 nil。"
  (org-supertag-db-get-field-value field-id node-id))

(defun org-supertag-node--set-field-value (node-id field-id value)
  "设置节点字段值。"
  (message "[DEBUG Node] 设置字段值 - Node ID: %s, Field ID: %s, Value: %S" node-id field-id value)
  (when-let* ((field (org-supertag-field-get field-id))
              (field-name (org-supertag-field-name field)))
    (message "[DEBUG Node] 找到字段: %S, 字段名: %S" field field-name)
    ;; 使用字符串作为属性名
    (org-entry-put (point) field-name value)
    ;; 创建或更新关系
    (org-supertag-db-create-relation 'node-field-rels node-id field-id value)))

;;----------------------------------------------------------------------
;; 内部辅助函数
;;----------------------------------------------------------------------

(defun org-supertag-node--init-tag-fields (node-id tag-id)
  "初始化节点的标签字段。"
  (let ((fields (org-supertag-tag-get-fields (org-supertag-tag-get tag-id))))
    (dolist (field fields)
      (let ((field-id (org-supertag-field-id field)))
        (org-supertag-db-create 'node-field-rels
                               (list :node-id node-id
                                     :field-id field-id
                                     :value nil))))))  ; 初始化字段值为 nil

(defun org-supertag-node--cleanup-tag-fields (node-id tag-id)
  "清理标签相关的字段。"
  (when-let* ((tag-spec (org-supertag-tag-get tag-id))
              (fields (plist-get tag-spec :fields)))
    (dolist (field-id fields)
      (org-supertag-node-set-property node-id field-id nil))))

(defun org-supertag-node-at-point ()
  "获取光标所在位置的节点信息。"
  (let ((node-id (org-id-get)))
    (when node-id
      (org-supertag-node-get node-id))))

;;----------------------------------------------------------------------
;; 初始化
;;----------------------------------------------------------------------

(defun org-supertag-node-init ()
  "初始化节点系统。"
  ;; 添加 org-mode 同步钩子
  (org-supertag-sync-init)
  (message "节点系统初始化完成"))   

(defun org-supertag-node-file (node-or-id)
  "Get the file path of NODE-OR-ID."
  (let ((node (if (stringp node-or-id)
                  (org-supertag-node-get node-or-id)
                node-or-id)))
    (when node
      (if (org-supertag-node-p node)
          (org-supertag-node-file-path node)
        (plist-get node :file)))))

(defun org-supertag-node-cleanup ()
  "清理节点系统。"
  (message "\n=== 清理节点系统 ===")
  ;; 移除同步钩子
  (org-supertag-sync-disable)
  ;; 清理节点数据
  (when-let ((store (org-supertag-db-get-store 'nodes)))
    (clrhash store))
  (when-let ((store (org-supertag-db-get-store 'node-tag-rels)))
    (clrhash store))
  (when-let ((store (org-supertag-db-get-store 'node-field-rels)))
    (clrhash store))
  (message "节点系统清理完成"))

(provide 'org-supertag-node)
;;; org-supertag-node.el ends here 
